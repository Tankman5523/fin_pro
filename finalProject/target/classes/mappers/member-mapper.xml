<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
  
  <mapper namespace="memberMapper">
	
	<resultMap type="student" id="loginStudentMap">
		<result column="STUDENT_NO" property="studentNo"/>
		<result column="DEPARTMENT_NAME" property="departmentNo"/>
		<result column="COLLEGE_NAME" property="collegeNo"/>
		<result column="FILE_NO" property="fileNo"/>
		<result column="STUDENT_NAME" property="studentName"/>
		<result column="STUDENT_PWD" property="studentPwd"/>
		<result column="ENTRANCE_DATE" property="entranceDate"/>
		<result column="GRADUATION_DATE" property="graduationDate"/>
		<result column="CLASS_LEVEL" property="classLevel"/>
		<result column="PHONE" property="phone"/>
		<result column="EMAIL" property="email"/>
		<result column="POST" property="post"/>
		<result column="ADDRESS" property="address"/>
		<result column="STATUS" property="status"/>
	</resultMap>
  
  	<resultMap type="professor" id="loginProfessorMap">
  		<result column="PROFESSOR_NO" property="professorNo"/>
  		<result column="FILE_NO" property="fileNo"/>
  		<result column="DEPARTMENT_NAME" property="departmentNo"/>
  		<result column="COLLEGE_NAME" property="collegeNo"/>
  		<result column="PROFESSOR_NAME" property="professorName"/>
  		<result column="PROFESSOR_PWD" property="professorPwd"/>
  		<result column="POSITION" property="position"/>
  		<result column="ENTRANCE_DATE" property="entranceDate"/>
  		<result column="PHONE" property="phone"/>
  		<result column="EMAIL" property="email"/>
  		<result column="POST" property="post"/>
  		<result column="ADDRESS" property="address"/>
  		<result column="ACCOUNT_NO" property="accountNo"/>
  		<result column="ADMIN" property="admin"/>
  	</resultMap>
  
  	<resultMap type="classes" id="classResultMap">
  		<result column="CLASS_NO" property="classNo"/>
  		<result column="PROFESSOR_NAME" property="professorNo"/>
  		<result column="DEPARTMENT_NAME" property="departmentNo"/>
  		<result column="FILE_NO" property="fileNo"/>
  		<result column="CLASS_NAME" property="className"/>
  		<result column="CLASS_LEVEL" property="classLevel"/>
  		<result column="CLASS_YEAR" property="classYear"/>
  		<result column="CLASS_TERM" property="classTerm"/>
  		<result column="CLASSROOM" property="classroom"/>
  		<result column="DAY" property="day"/>
  		<result column="PERIOD" property="period"/>
  		<result column="CLASS_HOUR" property="classHour"/>
  		<result column="CLASS_NOS" property="classNos"/>
  		<result column="SPARE_NOS" property="spareNos"/>
  		<result column="EXPLAIN" property="explain"/>
  		<result column="CREDIT" property="credit"/>
  		<result column="DIVISION" property="division"/>
  		<result column="STATUS" property="status"/>
  	</resultMap>
  
  	<resultMap type="registerClass" id="registerClassMap">
  		<result column="COLLEGE_NAME" property="collegeName"/>
  		<result column="CLASS_NO" property="classNo"/>
  		<result column="CLASS_NAME" property="className"/>
  		<result column="PROFESSOR_NAME" property="professorName"/>
  		<result column="DEPARTMENT_NAME" property="departmentName"/>
  		<result column="CREDIT_HOUR" property="creditHour"/>
  		<result column="SIGNUPNOS" property="signUpNos"/>
  		<result column="POSTCLASS_NOS" property="postClassNos"/>
  		<result column="PRECLASS_NOS" property="preClassNos"/>
  		<result column="CLASS_INFO" property="classInfo"/>
  		<result column="CLASS_LEVEL" property="classLevel"/>
  		<result column="STUDENT_NO" property="studentNo"/>
  		<result column="DAY" property="day"/>
  		<result column="PERIOD" property="period"/>
  		<result column="CLASS_HOUR" property="classHour"/>
  	</resultMap>
  
  	<resultMap type="department" id="departmentMap">
  		<result column="DEPARTMENT_NO" property="departmentNo"/>
  		<result column="COLLEGE_NAME" property="collegeNo"/>
  		<result column="DEPARTMENT_NAME" property="departmentName"/>
  		<result column="DEPARTMENT_NOS" property="departmentNos"/>
  		<result column="GRADUATION" property="graduation"/>
  	</resultMap>
  	
  	<resultMap type="counseling" id="counselingResultMap">
  		<result column="COUNSEL_NO" property="counselNo"/>
  		<result column="STUDENT_NO" property="studentNo"/>
  		<result column="PROFESSOR_NO" property="professorNo"/>
  		<result column="APPLICATION_DATE" property="applicationDate"/>
  		<result column="REQUEST_DATE" property="requestDate"/>
  		<result column="COUNSEL_AREA" property="counselArea"/>
  		<result column="COUNSEL_CONTENT" property="counselContent"/>
  		<result column="COUNSEL_RESULT" property="counselResult"/>
  		<result column="STATUS" property="status"/>
  		<result column="PROFESSOR_NAME" property="professorName"/>
  	</resultMap>
  	
  	<resultMap type="studentRest" id="studentRestResultMap">
  		<result column="REST_NO" property="restNo"/>
  		<result column="STUDENT_NO" property="studentNo"/>
  		<result column="CATEGORY" property="category"/>
  		<result column="REASON" property="reason"/>
  		<result column="REQUEST_DATE" property="requestDate"/>
  		<result column="START_DATE" property="startDate"/>
  		<result column="END_DATE" property="endDate"/>
  		<result column="STATUS" property="status"/>
  	</resultMap>
  	
  	<resultMap type="registPay" id="registPayResultSet">
		<result column="REG_ACCOUNT_NO" property="regAccountNo"/>
		<result column="MUST_PAY" property="mustPay"/>
		<result column="INPUT_PAY" property="inputPay"/>
		<result column="START_DATE" property="startDate"/>
		<result column="END_DATE" property="endDate"/>
		<result column="PAY_STATUS" property="payStatus"/>
	</resultMap>
	
	<resultMap type="attachment" id="attachmentResultSet">
  		<result column="FILE_NO" property="fileNo"/>
  		<result column="ORIGIN_NAME" property="originName"/>
  		<result column="CHANGE_NAME" property="changeName"/>
  		<result column="FILE_PATH" property="filePath"/>
  		<result column="UPLOAD_DATE" property="uploadDate"/>
  		<result column="STATUS" property="status"/>
  	</resultMap>
  	
  	<resultMap type="hashmap" id="gradeCountHashMap">
  		<result column="ALL_COUNT" property="allCount"/>
  		<result column="A_COUNT" property="aCount"/>
  		<result column="B_COUNT" property="bCount"/>
  		<result column="C_COUNT" property="cCount"/>
  		<result column="D_COUNT" property="dCount"/>
  		<result column="F_COUNT" property="fCount"/>
  	</resultMap>
	
	<resultMap type="hashmap" id="gradeHashMap">
		<result column="CLASS_NO" property="classNo"/>
		<result column="CLASS_NAME" property="className"/>
		<result column="CLASS_YEAR" property="classYear"/>
		<result column="CLASS_TERM" property="classTerm"/>
		<result column="CREDIT" property="credit"/>
		<result column="DEPARTMENT_NAME" property="departmentName"/>
		<result column="PROFESSOR_NAME" property="professorName"/>
		<result column="STUDENT_NO" property="studentNo"/>
		<result column="STUDENT_NAME" property="studentName"/>
		<result column="CLASS_LEVEL" property="classLevel"/>
		<result column="SCORE" property="score"/>
		<result column="GRADE_LEVEL" property="gradeLevel"/>
	</resultMap>
	
	<resultMap type="hashmap" id="termGradeHashMap">
		<result column="CLASS_YEAR" property="classYear"/> <!-- 학년도 -->
		<result column="CLASS_TERM" property="classTerm"/> <!-- 학기 -->
		<result column="SIGN_UP" property="signUp"/> <!-- 신청학점 -->
		<result column="OBTAIN" property="obtain"/> <!-- 취득학점 -->
		<result column="TERM_GRADE" property="termGrade"/> <!-- 평점계 -->
	</resultMap>
  	
  	<resultMap type="graduation" id="graduationResultMap">
  		<result column="STUDENT_NO" property="studentNo"/>
  		<result column="STUDENT_NAME" property="studentName"/>
  		<result column="ENTRANCE_DATE" property="entranceDate"/>
  		<result column="COLLEGE_NAME" property="collegeName"/>
  		<result column="DEPARTMENT_NAME" property="departmentName"/>
  		<result column="STATUS" property="status"/>
  		<result column="CLASS_LEVEL" property="classLevel"/>
  		<result column="CLASS_TERM" property="classTerm"/>
  		<result column="SUMCREDIT" property="sumCredit"/>
  		<result column="COMMON_CLASS" property="commonClass"/>
  		<result column="NOMAL_CLASS" property="nomalClass"/>
  		<result column="MAJOR_CLASS" property="majorClass"/>
  	</resultMap>
  	
  	<resultMap type="calendar" id="calendarResultMap">
  		<result column="CALENDAR_NO" property="calendarNo"/>
  		<result column="CONTENT" property="content"/>
  		<result column="START_DATE" property="startDate"/>
  		<result column="END_DATE" property="endDate"/>
  	</resultMap>
  	
  	<resultMap type="hashmap" id="calendarList">
  		<result column="CALENDAR_NO" property="calendarNo"/>
  		<result column="CONTENT" property="title"/>
  		<result column="START_DATE" property="start"/>
  		<result column="END_DATE" property="end"/>
  	</resultMap>
  	
  	<!-- 학생 로그인 -->
  	<select id="loginStudent" parameterType="student" resultMap="loginStudentMap">
  		SELECT STUDENT_NO,D.DEPARTMENT_NAME,C.COLLEGE_NAME,FILE_NO,STUDENT_NAME,STUDENT_PWD,
               ENTRANCE_DATE,GRADUATION_DATE,CLASS_LEVEL,PHONE,EMAIL,POST,ADDRESS,STATUS
  		FROM STUDENT S
  		JOIN DEPARTMENT D ON (S.DEPARTMENT_NO = D.DEPARTMENT_NO) 
        JOIN COLLEGE C ON (S.COLLEGE_NO = C.COLLEGE_NO)
  		WHERE STUDENT_NO = #{studentNo}
  	</select>
  	
  	<!-- 임직원 로그인 -->
  	<select id="loginProfessor" parameterType="professor" resultMap="loginProfessorMap">
  		SELECT PROFESSOR_NO,FILE_NO,D.DEPARTMENT_NAME,C.COLLEGE_NAME,PROFESSOR_NAME
  			  ,PROFESSOR_PWD,POSITION,ENTRANCE_DATE,PHONE,EMAIL,POST,ADDRESS,ACCOUNT_NO,ADMIN,STATUS
  		FROM PROFESSOR P
        JOIN DEPARTMENT D ON (P.DEPARTMENT_NO = D.DEPARTMENT_NO)
        JOIN COLLEGE C ON (P.COLLEGE_NO = C.COLLEGE_NO)
  		WHERE PROFESSOR_NO = #{professorNo}
  	</select>
  
  	<!-- ID조회 - 학생 -->
  	<select id="checkEmail" parameterType="student" resultMap="loginStudentMap">
  		SELECT STUDENT_NO,PHONE,EMAIL
  		FROM STUDENT
  		WHERE STUDENT_NAME = #{studentName}
  		AND PHONE = #{phone}
  		AND STATUS = '재학'
  	</select>
  	
  	<!-- ID조회 - 임직원 -->
  	<select id="checkEmail2" parameterType="professor" resultMap="loginProfessorMap">
  		SELECT PROFESSOR_NO,PHONE,EMAIL
  		FROM PROFESSOR
  		WHERE PROFESSOR_NAME = #{professorName}
  		AND PHONE = #{phone}
  		AND STATUS = 'Y'
  	</select>
  	
  	<!-- 비밀번호 초기화 - 학생 -->
  	<select id="checkPwd" parameterType="student" resultMap="loginStudentMap">
		SELECT STUDENT_NO,PHONE,EMAIL
  		FROM STUDENT
  		WHERE STUDENT_NO = #{studentNo}
  		AND PHONE = #{phone}
  		AND STATUS = '재학'
  	</select>
  	
  	<!-- 비밀번호 초기화 - 임직원 -->
  	<select id="checkPwd2" parameterType="professor" resultMap="loginProfessorMap">
  		SELECT PROFESSOR_NO,PHONE,EMAIL
  		FROM PROFESSOR
  		WHERE PROFESSOR_NO = #{professorNo}
  		AND PHONE = #{phone}
  		AND STATUS = 'Y'
  	</select>
  	
  	<!-- 비밀번호 초기화 - 비밀번호 변경 메소드 (학생) -->
  	<update id="changePwd">
  		UPDATE STUDENT
  		SET STUDENT_PWD = #{studentPwd}
  		WHERE STUDENT_NO = #{studentNo} 
  		AND STATUS = '재학'
  	</update>
  
  	<!-- 비밀번호 초기화 - 비밀번호 변경 메소드 (임직원) -->
  	<update id="changePwd2">
  		UPDATE PROFESSOR
  		SET PROFESSOR_PWD = #{professorPwd}
  		WHERE PROFESSOR_NO = #{professorNo} 
  		AND STATUS = 'Y'
  	</update>
  	
  	<!-- 단과대학 전공 조회  -->
  	<select id="selectDepart" resultType="string">
  		SELECT DEPARTMENT_NAME
		FROM DEPARTMENT
		WHERE COLLEGE_NO = (SELECT COLLEGE_NO
		                    FROM COLLEGE
		                    WHERE COLLEGE_NAME = #{college})
  	</select>
  	
  	<!-- 수강신청 - 수강신청내역조회 (로그인 학생의 수강신청 년도/학기 추출) -->
  	<select id="searchRegYear" parameterType="classes" resultMap="classResultMap">
	  	SELECT DISTINCT CLASS_YEAR, CLASS_TERM
		FROM SCHEDULE S
		JOIN CLASS C USING (CLASS_NO)
		WHERE STUDENT_NO = #{studentNo}
		ORDER BY CLASS_YEAR DESC
  	</select>
  	
  	<!-- 예비수강신청 - 중복체크 -->
  	<select id="checkPreReg" resultType="_int">
  		SELECT COUNT(CLASS_NOS) COUNT
		FROM CLASS C
		JOIN BUCKET B ON (C.CLASS_NO = B.CLASS_NO)
		WHERE B.CLASS_NO = #{classNo}
		AND STUDENT_NO = #{studentNo}
		AND STATUS = 'Y'
  	</select>
  	
  	<!-- 예비수강신청 - 수강담기 -->
  	<insert id="preRegisterClass">
  		INSERT INTO BUCKET VALUES(#{classNo},#{studentNo})
  	</insert>
  	
  	<!-- 예비수강신청 - 장바구니조회 -->
  	<select id="preRegList" parameterType="registerClass" resultMap="registerClassMap">
 		 SELECT COLLEGE_NAME,C.CLASS_NO,CLASS_NAME,PROFESSOR_NAME,DEPARTMENT_NAME
		,CONCAT(CONCAT(CLASS_HOUR,'/'),CREDIT) "CREDIT_HOUR"
		,((SELECT COUNT(*)
		   FROM BUCKET
		   WHERE CLASS_NO = C.CLASS_NO)|| '/' ||CLASS_NOS) "PRECLASS_NOS"
		,(DECODE(DAY,1,'월',2,'화',3,'수',4,'목',5,'금')||' '||
		  DECODE(CLASS_HOUR,1,DECODE(PERIOD,1,'09:00~10:00',2,'10:00~11:00',3,'11:00~12:00',4,'12:00~13:00',5,'13:00~14:00',6,'14:00~15:00',7,'15:00~16:00',8,'16:00~17:00',9,'17:00~18:00',10,'18:00~19:00'),
		                    2,DECODE(PERIOD,1,'09:00~11:00',2,'10:00~12:00',3,'11:00~13:00',4,'12:00~14:00',5,'13:00~15:00',6,'14:00~16:00',7,'15:00~17:00',8,'16:00~18:00',9,'17:00~19:00')) 
		||' '|| CLASSROOM) "CLASS_INFO",
		DECODE(CLASS_LEVEL,0,'전체학년',1,'1학년',2,'2학년',3,'3학년',4,'4학년') "CLASS_LEVEL"
		FROM CLASS C
		JOIN DEPARTMENT D ON (C.DEPARTMENT_NO = D.DEPARTMENT_NO)
		JOIN COLLEGE CO ON (D.COLLEGE_NO = CO.COLLEGE_NO)
		JOIN PROFESSOR P ON (P.PROFESSOR_NO = C.PROFESSOR_NO)
        JOIN BUCKET B ON (C.CLASS_NO = B.CLASS_NO)
		WHERE C.STATUS = 'Y'
        AND B.STUDENT_NO = #{studentNo}
        AND C.CLASS_NO NOT IN (SELECT CLASS_NO
		                       FROM SCHEDULE
		                       WHERE STUDENT_NO = #{studentNo})
		AND CLASS_YEAR = #{classYear}
		AND CLASS_TERM = #{classTerm}
		GROUP BY COLLEGE_NAME, C.CLASS_NO, CLASS_NAME, PROFESSOR_NAME, DEPARTMENT_NAME,CLASS_NOS,
		CONCAT(CONCAT(CLASS_HOUR,'/'),CREDIT), (DECODE(DAY,1,'월',2,'화',3,'수',4,'목',5,'금')||' '||
		DECODE(CLASS_HOUR,1,DECODE(PERIOD,1,'09:00~10:00',2,'10:00~11:00',3,'11:00~12:00',4,'12:00~13:00',5,'13:00~14:00',6,'14:00~15:00',7,'15:00~16:00',8,'16:00~17:00',9,'17:00~18:00',10,'18:00~19:00'),
						  2,DECODE(PERIOD,1,'09:00~11:00',2,'10:00~12:00',3,'11:00~13:00',4,'12:00~14:00',5,'13:00~15:00',6,'14:00~16:00',7,'15:00~17:00',8,'16:00~18:00',9,'17:00~19:00')) ||' '|| CLASSROOM),
						  DECODE(CLASS_LEVEL,0,'전체학년',1,'1학년',2,'2학년',3,'3학년',4,'4학년')
  	</select>
  	
   	<!-- 예비수강신청 - 수강조회 --> 	
  	<select id="preRegClass" parameterType="registerClass" resultMap="registerClassMap">
  		SELECT COLLEGE_NAME,CLASS_NO,CLASS_NAME,PROFESSOR_NAME,DEPARTMENT_NAME
		,CONCAT(CONCAT(CLASS_HOUR,'/'),CREDIT) "CREDIT_HOUR"
		,((SELECT COUNT(*)
		   FROM BUCKET
		   WHERE CLASS_NO = C.CLASS_NO)|| '/' ||CLASS_NOS) "PRECLASS_NOS"
		,(DECODE(DAY,1,'월',2,'화',3,'수',4,'목',5,'금')||' '||
		  DECODE(CLASS_HOUR,1,DECODE(PERIOD,1,'09:00~10:00',2,'10:00~11:00',3,'11:00~12:00',4,'12:00~13:00',5,'13:00~14:00',6,'14:00~15:00',7,'15:00~16:00',8,'16:00~17:00',9,'17:00~18:00',10,'18:00~19:00'),
		                    2,DECODE(PERIOD,1,'09:00~11:00',2,'10:00~12:00',3,'11:00~13:00',4,'12:00~14:00',5,'13:00~15:00',6,'14:00~16:00',7,'15:00~17:00',8,'16:00~18:00',9,'17:00~19:00')) 
		||' '|| CLASSROOM) "CLASS_INFO",
		DECODE(CLASS_LEVEL,0,'전체학년',1,'1학년',2,'2학년',3,'3학년',4,'4학년') "CLASS_LEVEL"
		FROM CLASS C
		JOIN DEPARTMENT D ON (C.DEPARTMENT_NO = D.DEPARTMENT_NO)
		JOIN COLLEGE CO ON (D.COLLEGE_NO = CO.COLLEGE_NO)
		JOIN PROFESSOR P ON (P.PROFESSOR_NO = C.PROFESSOR_NO)
		WHERE C.STATUS = 'Y'
		AND CLASS_NO NOT IN (SELECT CLASS_NO
	              		 	 FROM BUCKET
	               			 WHERE STUDENT_NO = #{studentNo})
		AND CLASS_YEAR = #{classYear}
		AND CLASS_TERM = #{classTerm}
        AND C.CLASS_NO NOT IN (SELECT CLASS_NO
                               FROM CLASS 
                               WHERE CLASS_NAME IN (SELECT CLASS_NAME
                                                    FROM CLASS C
                                                    JOIN GRADE G USING (CLASS_NO)
                                                    WHERE STUDENT_NO = #{studentNo}
                                                    AND G.GRADE_LEVEL != 'F'))
		<choose>
			<when test="professorName != ''">
				AND PROFESSOR_NAME LIKE '%'||#{professorName}||'%'
			</when>
			<when test="className != ''">
				AND CLASS_NAME LIKE '%'||#{className}||'%'
			</when>
			<otherwise>
				AND DEPARTMENT_NAME = #{departmentName}
			</otherwise>
		</choose>
		GROUP BY COLLEGE_NAME, CLASS_NO, CLASS_NAME, PROFESSOR_NAME, DEPARTMENT_NAME,CLASS_NOS,CLASS_LEVEL,
		CONCAT(CONCAT(CLASS_HOUR,'/'),CREDIT), (DECODE(DAY,1,'월',2,'화',3,'수',4,'목',5,'금')||' '||
		DECODE(CLASS_HOUR,1,DECODE(PERIOD,1,'09:00~10:00',2,'10:00~11:00',3,'11:00~12:00',4,'12:00~13:00',5,'13:00~14:00',6,'14:00~15:00',7,'15:00~16:00',8,'16:00~17:00',9,'17:00~18:00',10,'18:00~19:00'),
						  2,DECODE(PERIOD,1,'09:00~11:00',2,'10:00~12:00',3,'11:00~13:00',4,'12:00~14:00',5,'13:00~15:00',6,'14:00~16:00',7,'15:00~17:00',8,'16:00~18:00',9,'17:00~19:00')) ||' '|| CLASSROOM),
						  DECODE(CLASS_LEVEL,0,'전체학년',1,'1학년',2,'2학년',3,'3학년',4,'4학년')
		ORDER BY C.CLASS_LEVEL ASC, C.CLASS_NO ASC
  	</select>
  	
  	<!-- 예비수강신청 - 장바구니 수강삭제 -->
  	<delete id="delPreRegList">
  		DELETE FROM BUCKET
  		WHERE CLASS_NO = #{classNo}
  		AND STUDENT_NO = #{studentNo}
  	</delete>
  	
  	<!-- 수강신청 - 수강신청(수강조회) -->
  	<select id="postRegClass" parameterType="registerClass" resultMap="registerClassMap">
  		SELECT COLLEGE_NAME,CLASS_NO,CLASS_NAME,PROFESSOR_NAME,DEPARTMENT_NAME
		,CONCAT(CONCAT(CLASS_HOUR,'/'),CREDIT) "CREDIT_HOUR"
		,(SELECT COUNT(*)
           FROM (SELECT DISTINCT CLASS_NO, STUDENT_NO
                 FROM SCHEDULE)
		   WHERE CLASS_NO = C.CLASS_NO) "SIGNUPNOS"
		,CLASS_NOS "POSTCLASS_NOS"
		,(DECODE(DAY,1,'월',2,'화',3,'수',4,'목',5,'금')||' '||
		  DECODE(CLASS_HOUR,1,DECODE(PERIOD,1,'09:00~10:00',2,'10:00~11:00',3,'11:00~12:00',4,'12:00~13:00',5,'13:00~14:00',6,'14:00~15:00',7,'15:00~16:00',8,'16:00~17:00',9,'17:00~18:00',10,'18:00~19:00'),
		                    2,DECODE(PERIOD,1,'09:00~11:00',2,'10:00~12:00',3,'11:00~13:00',4,'12:00~14:00',5,'13:00~15:00',6,'14:00~16:00',7,'15:00~17:00',8,'16:00~18:00',9,'17:00~19:00')) 
		||' '|| CLASSROOM) "CLASS_INFO",
		DECODE(CLASS_LEVEL,0,'전체학년',1,'1학년',2,'2학년',3,'3학년',4,'4학년') "CLASS_LEVEL"
		FROM CLASS C
		JOIN DEPARTMENT D ON (C.DEPARTMENT_NO = D.DEPARTMENT_NO)
		JOIN COLLEGE CO ON (D.COLLEGE_NO = CO.COLLEGE_NO)
		JOIN PROFESSOR P ON (P.PROFESSOR_NO = C.PROFESSOR_NO)
		WHERE C.STATUS = 'Y'
		AND CLASS_NO NOT IN (SELECT CLASS_NO
                             FROM SCHEDULE
                             WHERE STUDENT_NO = #{studentNo})
		AND CLASS_YEAR = #{classYear}
		AND CLASS_TERM = #{classTerm}
        AND C.CLASS_NO NOT IN (SELECT CLASS_NO
                               FROM CLASS 
                               WHERE CLASS_NAME IN (SELECT CLASS_NAME
                                                    FROM CLASS C
                                                    JOIN GRADE G USING (CLASS_NO)
                                                    WHERE STUDENT_NO = #{studentNo}
                                                    AND G.GRADE_LEVEL != 'F'))
		<choose>
			<when test="professorName != ''">
				AND PROFESSOR_NAME LIKE '%'||#{professorName}||'%'
			</when>
			<when test="className != ''">
				AND CLASS_NAME LIKE '%'||#{className}||'%'
			</when>
			<otherwise>
				AND DEPARTMENT_NAME = #{departmentName}
			</otherwise>
		</choose>
		ORDER BY C.CLASS_LEVEL ASC,C.CLASS_NO ASC
  	</select>
  	
  	<!-- 수강신청 - 수강신청 (장바구니) -->
  	<select id="postRegBucket" parameterType="registerClass" resultMap="registerClassMap">
 		 SELECT COLLEGE_NAME,C.CLASS_NO,CLASS_NAME,PROFESSOR_NAME,DEPARTMENT_NAME
		,CONCAT(CONCAT(CLASS_HOUR,'/'),CREDIT) "CREDIT_HOUR"
		,((SELECT COUNT(*)
           FROM (SELECT DISTINCT CLASS_NO, STUDENT_NO
                 FROM SCHEDULE)
           WHERE CLASS_NO = C.CLASS_NO)|| '/' ||CLASS_NOS) "POSTCLASS_NOS"
		,(DECODE(DAY,1,'월',2,'화',3,'수',4,'목',5,'금')||' '||
		  DECODE(CLASS_HOUR,1,DECODE(PERIOD,1,'09:00~10:00',2,'10:00~11:00',3,'11:00~12:00',4,'12:00~13:00',5,'13:00~14:00',6,'14:00~15:00',7,'15:00~16:00',8,'16:00~17:00',9,'17:00~18:00',10,'18:00~19:00'),
		                    2,DECODE(PERIOD,1,'09:00~11:00',2,'10:00~12:00',3,'11:00~13:00',4,'12:00~14:00',5,'13:00~15:00',6,'14:00~16:00',7,'15:00~17:00',8,'16:00~18:00',9,'17:00~19:00')) 
		||' '|| CLASSROOM) "CLASS_INFO",
		DECODE(CLASS_LEVEL,0,'전체학년',1,'1학년',2,'2학년',3,'3학년',4,'4학년') "CLASS_LEVEL"
		FROM CLASS C
		JOIN DEPARTMENT D ON (C.DEPARTMENT_NO = D.DEPARTMENT_NO)
		JOIN COLLEGE CO ON (D.COLLEGE_NO = CO.COLLEGE_NO)
		JOIN PROFESSOR P ON (P.PROFESSOR_NO = C.PROFESSOR_NO)
        JOIN BUCKET B ON (C.CLASS_NO = B.CLASS_NO)
		WHERE C.STATUS = 'Y'
        AND B.STUDENT_NO = #{studentNo}
        AND C.CLASS_NO NOT IN (SELECT CLASS_NO
                               FROM SCHEDULE
                               WHERE STUDENT_NO = #{studentNo})
		AND CLASS_YEAR = #{classYear}
		AND CLASS_TERM = #{classTerm}
		GROUP BY COLLEGE_NAME, C.CLASS_NO, CLASS_NAME, PROFESSOR_NAME, DEPARTMENT_NAME,CLASS_NOS,
		CONCAT(CONCAT(CLASS_HOUR,'/'),CREDIT), (DECODE(DAY,1,'월',2,'화',3,'수',4,'목',5,'금')||' '||
		DECODE(CLASS_HOUR,1,DECODE(PERIOD,1,'09:00~10:00',2,'10:00~11:00',3,'11:00~12:00',4,'12:00~13:00',5,'13:00~14:00',6,'14:00~15:00',7,'15:00~16:00',8,'16:00~17:00',9,'17:00~18:00',10,'18:00~19:00'),
						  2,DECODE(PERIOD,1,'09:00~11:00',2,'10:00~12:00',3,'11:00~13:00',4,'12:00~14:00',5,'13:00~15:00',6,'14:00~16:00',7,'15:00~17:00',8,'16:00~18:00',9,'17:00~19:00')) ||' '|| CLASSROOM),
						  DECODE(CLASS_LEVEL,0,'전체학년',1,'1학년',2,'2학년',3,'3학년',4,'4학년')  		
  	</select>
  	
  	<!-- 수강신청 - 수강신청 (해당강의 조회) -->
  	<select id="selectClass" parameterType="classes" resultMap="classResultMap">
		SELECT C.DAY,C.PERIOD,CLASS_HOUR,COUNT(S.CLASS_NO) "SPARE_NOS", CLASS_NOS
  		FROM CLASS C
        LEFT JOIN SCHEDULE S ON (C.CLASS_NO = S.CLASS_NO)
  		WHERE C.CLASS_NO = #{classNo}
        GROUP BY C.DAY, C.PERIOD, CLASS_HOUR, CLASS_NOS
  	</select>
  	
  	<!-- 수강신청 - 수강신청 (강의 시간 체크) -->
  	<select id="checkPostReg2" resultType="_int">
  		SELECT COUNT(*) COUNT
  		FROM SCHEDULE S
  		JOIN CLASS C USING (CLASS_NO)
		WHERE S.DAY = #{day}
		AND CLASS_YEAR = #{classYear}
		AND CLASS_TERM = #{classTerm}
		AND STUDENT_NO = #{studentNo}
  		<choose>
  			<when test="classHour == 2">
  				AND (S.PERIOD = #{period}+1 OR S.PERIOD = #{period})
  			</when>
  			<when test="classHour == 1">
  				AND S.PERIOD = #{period}
  			</when>
  		</choose>
  	</select>
  	
  	<!-- 수강신청 - 수강신청 -->
  	<insert id="postRegisterClass">
  		INSERT INTO SCHEDULE VALUES(#{classNo},#{studentNo},#{day},#{period})
  	</insert>
  	
  	<!-- 수강신청 - 수강신청(해당 과목 장바구니에서 지워주기) -->
  	<delete id="postRegDelBucket">
  		DELETE FROM BUCKET
  		WHERE STUDENT_NO = #{studentNo}
  		AND CLASS_NO = #{classNo}
  	</delete>
  	
  	<!-- 수강신청 - 수강신청(2시간짜리 강의) -->
  	<insert id="postRegisterClass2">
  		INSERT INTO SCHEDULE VALUES(#{classNo},#{studentNo},#{day},#{period}+1)
  	</insert>
  	
  	<!-- 수강신청 - 수강신청내역 조회 -->
  	<select id="postRegList" parameterType="registerClass" resultMap="registerClassMap">
 	  	SELECT COLLEGE_NAME,C.CLASS_NO,CLASS_NAME,PROFESSOR_NAME,DEPARTMENT_NAME
		,CONCAT(CONCAT(CLASS_HOUR,'/'),CREDIT) "CREDIT_HOUR"
		,((SELECT COUNT(*)
           FROM (SELECT DISTINCT CLASS_NO, STUDENT_NO
                 FROM SCHEDULE)
		   WHERE CLASS_NO = C.CLASS_NO)|| '/' ||CLASS_NOS) "POSTCLASS_NOS"
		,(DECODE(C.DAY,1,'월',2,'화',3,'수',4,'목',5,'금')||' '||
		  DECODE(CLASS_HOUR,1,DECODE(C.PERIOD,1,'09:00~10:00',2,'10:00~11:00',3,'11:00~12:00',4,'12:00~13:00',5,'13:00~14:00',6,'14:00~15:00',7,'15:00~16:00',8,'16:00~17:00',9,'17:00~18:00',10,'18:00~19:00'),
		                    2,DECODE(C.PERIOD,1,'09:00~11:00',2,'10:00~12:00',3,'11:00~13:00',4,'12:00~14:00',5,'13:00~15:00',6,'14:00~16:00',7,'15:00~17:00',8,'16:00~18:00',9,'17:00~19:00')) ||' '|| CLASSROOM) "CLASS_INFO",
		DECODE(CLASS_LEVEL,0,'전체학년',1,'1학년',2,'2학년',3,'3학년',4,'4학년') "CLASS_LEVEL"
		FROM CLASS C
		JOIN DEPARTMENT D ON (C.DEPARTMENT_NO = D.DEPARTMENT_NO)
		JOIN COLLEGE CO ON (D.COLLEGE_NO = CO.COLLEGE_NO)
		JOIN PROFESSOR P ON (P.PROFESSOR_NO = C.PROFESSOR_NO)
        JOIN SCHEDULE S ON (C.CLASS_NO = S.CLASS_NO)
		WHERE C.STATUS = 'Y'
        AND S.STUDENT_NO = #{studentNo}
        AND CLASS_YEAR = #{classYear}
        AND CLASS_TERM = #{classTerm}
        group by COLLEGE_NAME, C.CLASS_NO, CLASS_NAME, PROFESSOR_NAME, DEPARTMENT_NAME, CLASS_NOS,
                CONCAT(CONCAT(CLASS_HOUR,'/'),CREDIT), (DECODE(C.DAY,1,'월',2,'화',3,'수',4,'목',5,'금')||' '|| 
                DECODE(CLASS_HOUR,1,DECODE(C.PERIOD,1,'09:00~10:00',2,'10:00~11:00',3,'11:00~12:00',4,'12:00~13:00',5,'13:00~14:00',6,'14:00~15:00',7,'15:00~16:00',8,'16:00~17:00',9,'17:00~18:00',10,'18:00~19:00'), 
                                  2,DECODE(C.PERIOD,1,'09:00~11:00',2,'10:00~12:00',3,'11:00~13:00',4,'12:00~14:00',5,'13:00~15:00',6,'14:00~16:00',7,'15:00~17:00',8,'16:00~18:00',9,'17:00~19:00')) ||' '|| CLASSROOM), 
                DECODE(CLASS_LEVEL,0,'전체학년',1,'1학년',2,'2학년',3,'3학년',4,'4학년')
  	</select>
  	
  	<!-- 수강신청 - 수강신청 (수강신청내역 수강취소) -->
  	<delete id="delPostRegList">
  		DELETE FROM SCHEDULE
  		WHERE CLASS_NO = #{classNo}
  		AND STUDENT_NO = #{studentNo}
  	</delete>
  	
  	<!-- 강의시간표 -> 전공 선택 후 전공수업 조회/교양수업 조회 -->
  	<select id="selectDepartment" parameterType="hashmap" resultMap="classResultMap">
  		SELECT FILE_PATH||CHANGE_NAME AS FILE_NO, CLASS_NO, PROFESSOR_NAME, DEPARTMENT_NAME, C.FILE_NO, CLASS_NAME
  				, DECODE(CLASS_LEVEL, '0', '전체학년', '1', '1학년', '2', '2학년', '3', '3학년', '4', '4학년') AS CLASS_LEVEL
  				, CLASS_YEAR, CLASS_TERM, CLASSROOM
  				, DECODE(DAY, '1', '월', '2', '화', '3', '수', '4', '목', '5', '금') AS DAY
  				, DECODE(PERIOD, '1', 9, '2', 10, '3', 11, '4', 12, '5', 13, '6', 14, '7', 15, '8', 16, '9', 17, '10', 18)||':00 ~ '||(DECODE(C.PERIOD, '1', 9, '2', 10, '3', 11, '4', 12, '5', 13, '6', 14, '7', 15, '8', 16, '9', 17, '10', 18)+CLASS_HOUR)||':00' AS PERIOD
  				, CLASS_HOUR, CLASS_NOS
                , CLASS_NOS - NVL(A.COUNT_CLASS,0) AS SPARE_NOS
                , EXPLAIN, CREDIT, DIVISION, C.STATUS
		FROM (SELECT CLASS_NO, COUNT(*) AS COUNT_CLASS
				FROM (SELECT CLASS_NO, COUNT(*)
				        FROM SCHEDULE
				        GROUP BY CLASS_NO, STUDENT_NO)
				GROUP BY CLASS_NO) A
		RIGHT JOIN CLASS C USING(CLASS_NO)
		LEFT JOIN ATTACHMENT A ON(C.FILE_NO = A.FILE_NO)
		JOIN PROFESSOR P USING(PROFESSOR_NO)
		JOIN DEPARTMENT D ON(C.DEPARTMENT_NO = D.DEPARTMENT_NO)
		WHERE C.DEPARTMENT_NO = (SELECT DEPARTMENT_NO
		                        FROM DEPARTMENT
		                        WHERE DEPARTMENT_NAME = #{department})
		      AND CLASS_YEAR = #{year} AND CLASS_TERM = #{term} AND C.STATUS = 'Y'
		ORDER BY CLASS_LEVEL, CLASS_NAME
  	</select>
  	
  	<!-- 강의시간표 -> 학년도,학기 조회 -->
  	<select id="selectClassTerm" resultType="string">
  		SELECT CLASS_YEAR||'0'||CLASS_TERM
		FROM CLASS
		GROUP BY CLASS_YEAR, CLASS_TERM
		ORDER BY CLASS_YEAR DESC, CLASS_TERM ASC
  	</select>
  	
  	<!-- 학사관리 - 졸업사정표 -->
  	<select id="graduationInfo" parameterType="graduation" resultMap="graduationResultMap">
  		SELECT STUDENT_NO,STUDENT_NAME
		      ,TO_CHAR(ENTRANCE_DATE,'YYYY') "ENTRANCE_DATE"
		      ,COLLEGE_NAME,DEPARTMENT_NAME,STATUS,CLASS_LEVEL
		      ,NVL((SELECT A.CLASS_TERM
		            FROM (SELECT CLASS_TERM
		                  FROM GRADE
		                  WHERE STUDENT_NO = #{studentNo}
		                  ORDER BY CLASS_YEAR DESC) "A"
		            WHERE ROWNUM = 1),1) "CLASS_TERM"
		      ,(SELECT SUM(CREDIT)
		        FROM CLASS C
		        JOIN GRADE G USING (CLASS_NO)
		        WHERE STUDENT_NO = #{studentNo}
		        AND SCORE BETWEEN 60 AND 100) "SUMCREDIT"
		FROM STUDENT S
		JOIN COLLEGE C USING (COLLEGE_NO)
		JOIN DEPARTMENT D USING (DEPARTMENT_NO)
		WHERE STUDENT_NO = #{studentNo}
  	</select>
  	
  	<!-- 학사관리 - 졸업사정표(전체 이수현황 조회) -->
  	<select id="selectGraStatus" parameterType="hashmap" resultMap="graduationResultMap">
	  	<![CDATA[
  		SELECT NVL(A.CREDIT,0)"COMMON_CLASS", NVL(B.CREDIT,0) "NOMAL_CLASS", NVL(C.CREDIT,0) "MAJOR_CLASS"
		FROM (SELECT NVL(SUM(CREDIT),0)"CREDIT"
				FROM CLASS C
			    JOIN GRADE G USING (CLASS_NO)
			    WHERE STUDENT_NO = #{studentNo}
			    AND SCORE > 59
			    AND G.CLASS_YEAR <= #{year}
			    AND G.CLASS_TERM <= #{term}
			    AND C.DIVISION = 1) "A",
		     (SELECT NVL(SUM(CREDIT),0) "CREDIT"
		        FROM CLASS C
		        JOIN GRADE G USING (CLASS_NO)
		        JOIN DEPARTMENT D USING (DEPARTMENT_NO)
		        WHERE STUDENT_NO = #{studentNo}
		        AND SCORE > 59
		        AND G.CLASS_YEAR <= #{year}
		        AND G.CLASS_TERM <= #{term}
		        AND C.DIVISION = 0
		        AND DEPARTMENT_NAME != #{departmentName}) "B",
		    (SELECT NVL(SUM(CREDIT),0) "CREDIT"
		        FROM CLASS C
		        JOIN GRADE G USING (CLASS_NO)
		        JOIN DEPARTMENT D USING (DEPARTMENT_NO)
		        WHERE STUDENT_NO = #{studentNo}
		        AND SCORE > 59
		        AND G.CLASS_YEAR <= #{year}
		        AND G.CLASS_TERM <= #{term}
		        AND C.DIVISION = 0
		        AND DEPARTMENT_NAME = #{departmentName}) "C"
		]]>
  	</select>
  	
  	<!-- 학사관리 - 졸업사정표 (교양공통 세부조회) -->
  	<select id="detailCommonGra" resultType="HashMap">
  		<![CDATA[
  		SELECT CLASS_NAME, CREDIT
                 		 , G.CLASS_YEAR || '-' || G.CLASS_TERM || NVL(DECODE(GRADE_LEVEL,'F','학기'),'학기(이수)') "STATE"
                 		 , GRADE_LEVEL,NVL(DECODE(GRADE_LEVEL,'F',0),CREDIT) "RESULT_CREDIT"
		FROM CLASS C
		JOIN GRADE G ON (C.CLASS_NO = G.CLASS_NO)
		WHERE STUDENT_NO = #{studentNo}
		AND G.CLASS_YEAR <= #{year}
		AND DIVISION = 1
		ORDER BY G.CLASS_YEAR DESC,G.CLASS_TERM DESC
		]]>
  	</select>
  	
  	<!-- 학사관리 - 졸업사정표 (교양일반 세부조회) -->
  	<select id="detailNomalGra" resultType="HashMap">
		<![CDATA[
  		SELECT CLASS_NAME, CREDIT
                 		 , G.CLASS_YEAR || '-' || G.CLASS_TERM || NVL(DECODE(GRADE_LEVEL,'F','학기'),'학기(이수)') "STATE"
                 		 , GRADE_LEVEL,NVL(DECODE(GRADE_LEVEL,'F',0),CREDIT) "RESULT_CREDIT"
		FROM CLASS C
		JOIN GRADE G ON (C.CLASS_NO = G.CLASS_NO)
		JOIN DEPARTMENT D USING (DEPARTMENT_NO)
		WHERE STUDENT_NO = #{studentNo}
		AND G.CLASS_YEAR <= #{year}
		AND DIVISION = 0
		AND DEPARTMENT_NAME != #{departmentName}
		ORDER BY G.CLASS_YEAR DESC,G.CLASS_TERM DESC
		]]>
  	</select>
  	
  	<!-- 학사관리 - 졸업사정표 (전공심화 세부조회) -->
  	<select id="detailmajorGra" resultType="HashMap">
		<![CDATA[
  		SELECT CLASS_NAME, CREDIT
                 		 , G.CLASS_YEAR || '-' || G.CLASS_TERM || NVL(DECODE(GRADE_LEVEL,'F','학기'),'학기(이수)') "STATE"
                 		 , GRADE_LEVEL,NVL(DECODE(GRADE_LEVEL,'F',0),CREDIT) "RESULT_CREDIT"
		FROM CLASS C
		JOIN GRADE G ON (C.CLASS_NO = G.CLASS_NO)
		JOIN DEPARTMENT D USING (DEPARTMENT_NO)
		WHERE STUDENT_NO = #{studentNo}
		AND G.CLASS_YEAR <= #{year}
		AND DIVISION = 0
		AND DEPARTMENT_NAME = #{departmentName}
		ORDER BY G.CLASS_YEAR DESC,G.CLASS_TERM DESC
		]]>
  	</select>
  	
  	<!-- (학생)상담신청 내역 가져오기 -->
  	<select id="selectCounStuList" resultMap="counselingResultMap">
  		SELECT COUNSEL_NO,PROFESSOR_NO,PROFESSOR_NAME,APPLICATION_DATE,REQUEST_DATE,COUNSEL_CONTENT,COUNSEL_AREA,C.STATUS
  		FROM COUNSELING C
  		JOIN PROFESSOR P USING (PROFESSOR_NO)
  		WHERE STUDENT_NO = #{studentNo}
  		ORDER BY APPLICATION_DATE DESC
	 </select>
	 
	 <!-- (학생)상담신청 내역 검색해서 가져오기 -->
	 <select id="selectSearchCounList" resultMap="counselingResultMap">
		 
		 	SELECT COUNSEL_NO,PROFESSOR_NO,PROFESSOR_NAME,APPLICATION_DATE,REQUEST_DATE,COUNSEL_CONTENT,COUNSEL_AREA,C.STATUS
	  		FROM COUNSELING C
	  		JOIN PROFESSOR P USING (PROFESSOR_NO)
	  		WHERE STUDENT_NO = #{studentNo}
	        AND   COUNSEL_AREA LIKE #{counselArea}
	        AND   TO_CHAR(APPLICATION_DATE,'YYYY') LIKE #{year}
	        AND   APPLICATION_DATE BETWEEN TO_DATE(#{startDate},'YYYY-MM-DD') AND TO_DATE(#{endDate},'YYYY-MM-DD')
	  		ORDER BY APPLICATION_DATE DESC
		 
	 </select>
  	
  	<!-- 학과명으로 확과번호 조회 -->
  	<select id="selectDepartmentNo" resultMap="departmentMap">
  		SELECT DEPARTMENT_NO
  		FROM DEPARTMENT
  		WHERE DEPARTMENT_NAME = #{departmentNo}
  	</select>
  	
  	<!-- 상담신청 - 학과별 교수리스트 조회 -->
  	<select id="selectDepartProList" resultMap="loginProfessorMap">
  		SELECT PROFESSOR_NO,PROFESSOR_NAME,DEPARTMENT_NAME,POSITION,EMAIL
  		FROM PROFESSOR
  		JOIN DEPARTMENT USING(DEPARTMENT_NO)
  		WHERE DEPARTMENT_NO = #{departmentNo}
  		AND POSITION != '행정직원'
  	</select>
  	
  	<!-- 상담신청 - 인서트 -->
  	<insert id="insertCounseling">
  		INSERT INTO COUNSELING(COUNSEL_NO,STUDENT_NO,PROFESSOR_NO,REQUEST_DATE,COUNSEL_AREA,COUNSEL_CONTENT)
  		VALUES (SEQ_COUNO.NEXTVAL,#{studentNo},#{professorNo},#{requestDate},#{counselArea},#{counselContent})
  	</insert>
  	
  	<!-- 상담 상세보기 -->
  	<select id="selectCounseling" resultMap="counselingResultMap">
  		SELECT *
  		FROM COUNSELING
  		WHERE COUNSEL_NO = #{counselNo}
  	</select>
  	
  	<!-- 직번으로 교수정보조회 -->
  	<select id="selectProfessorForNo" resultMap="loginProfessorMap">
  		SELECT PROFESSOR_NO,PROFESSOR_NAME,DEPARTMENT_NAME,POSITION,EMAIL
  		FROM PROFESSOR
  		JOIN DEPARTMENT USING(DEPARTMENT_NO)
  		WHERE PROFESSOR_NO = #{professorNo}
  	</select>
  	
  	<!-- 상담요청내용 수정(학생) -->
  	<update id="updateCounContent">
  		UPDATE COUNSELING
  		SET COUNSEL_CONTENT = #{counselContent}
  		WHERE COUNSEL_NO = #{counselNo}
  		AND STATUS = 'N'
  	</update>
  	
  	<!-- 휴,복학신청 리스트 조회(학생) -->
  	<select id="selectStuRestList" resultMap="studentRestResultMap">
  		SELECT *
  		FROM STUDENT_REST
  		WHERE STUDENT_NO = #{studentNo}
  		ORDER BY REST_NO DESC
  	</select>
  	
  	<!-- 휴학 횟수 가져오기 -->
  	<select id="selectRestCount" resultType="int">
  		SELECT COUNT(*)
  		FROM STUDENT_REST
  		WHERE STUDENT_NO = #{studentNo}
  		AND STATUS = 'Y'
  	</select>
  	
  	<!-- 휴학 정보 가져오기(학생) -->
  	<select id="selectRestInfo" resultMap="studentRestResultMap">
  		SELECT ROWNUM,S.*
		FROM (SELECT *
		      FROM STUDENT_REST
		      WHERE STUDENT_NO = #{studentNo}
		      ORDER BY REST_NO DESC) S
		WHERE ROWNUM = 1
  	</select>
  	
  	<!-- 등록금납부 했는지(학생) -->
  	<select id="checkRegPay" resultMap="registPayResultSet">
  		SELECT REG_NO,MUST_PAY,INPUT_PAY,REG_ACCOUNT_NO,PAY_STATUS
		FROM REG_ACC
		WHERE STUDENT_NO = #{studentNo}
		AND   CLASS_YEAR = #{classYear}
		AND   CLASS_TERM = #{classTerm}
		AND   STATUS = 'Y'
  	</select>
  	
  	<!-- 휴,복학 신청 인서트(학생) -->
  	<insert id="insertStuRest">
  		INSERT INTO STUDENT_REST(REST_NO,STUDENT_NO,CATEGORY,REASON,START_DATE,END_DATE)
  		VALUES(SEQ_SRNO.NEXTVAL,#{studentNo},#{category},#{reason},#{startDate},#{endDate})
  	</insert>
  	
  	<!-- 강의시간표 -> 교수명 검색/과목 검색 -->
  	<select id="searchClassKeyword" parameterType="hashmap" resultMap="classResultMap">
  		SELECT FILE_PATH||CHANGE_NAME AS FILE_NO, CLASS_NO, PROFESSOR_NAME, DEPARTMENT_NAME, C.FILE_NO, CLASS_NAME
  				, DECODE(CLASS_LEVEL, '0', '전체학년', '1', '1학년', '2', '2학년', '3', '3학년', '4', '4학년') AS CLASS_LEVEL
  				, CLASS_YEAR, CLASS_TERM, CLASSROOM
  				, DECODE(DAY, '1', '월', '2', '화', '3', '수', '4', '목', '5', '금') AS DAY
  				, DECODE(PERIOD, '1', 9, '2', 10, '3', 11, '4', 12, '5', 13, '6', 14, '7', 15, '8', 16, '9', 17, '10', 18)||':00 ~ '||(DECODE(PERIOD, '1', 9, '2', 10, '3', 11, '4', 12, '5', 13, '6', 14, '7', 15, '8', 16, '9', 17, '10', 18)+CLASS_HOUR)||':00' AS PERIOD
  				, CLASS_HOUR, CLASS_NOS
  				, CLASS_NOS - NVL(A.COUNT_CLASS,0) AS SPARE_NOS
  				, EXPLAIN, CREDIT, DIVISION, C.STATUS
		FROM (SELECT CLASS_NO, COUNT(*) AS COUNT_CLASS
				FROM (SELECT CLASS_NO, COUNT(*)
				        FROM SCHEDULE
				        GROUP BY CLASS_NO, STUDENT_NO)
				GROUP BY CLASS_NO) A
		RIGHT JOIN CLASS C USING(CLASS_NO)
		LEFT JOIN ATTACHMENT A ON(C.FILE_NO = A.FILE_NO)
		JOIN PROFESSOR P USING(PROFESSOR_NO)
		JOIN DEPARTMENT D ON(C.DEPARTMENT_NO = D.DEPARTMENT_NO)
		WHERE CLASS_YEAR = #{year} AND CLASS_TERM = #{term} AND C.STATUS = 'Y'
		<if test="condition == 'professor'">
			AND PROFESSOR_NAME
		</if>
		<if test="condition == 'subject'">
			AND CLASS_NAME
		</if>
		LIKE '%'||#{keyword}||'%'
		ORDER BY CLASS_LEVEL, CLASS_NAME
  	</select>
  	
  	<update id="updateStudent">
  	UPDATE STUDENT 
  	SET PHONE = #{phone},
  			EMAIL = #{email},
  			POST = #{post},
  			ADDRESS =#{address}
  	WHERE STUDENT_NO =#{studentNo}
  	</update>
  	
  	<!-- 교수 학적정보 변경 -->
  	<update id ="updateProfessor">
  	UPDATE PROFESSOR
  	SET PHONE = #{phone},
  		EMAIL = #{email},
  		POST = #{post},
  		ADDRESS = #{address}
  	WHERE PROFESSOR_NO = #{professorNo}
  	</update>
  	  	
  	<!-- 학생 개인시간표 -> 학년도,학기 조회 -->
  	<select id="selectStudentClassTerm" resultType="string">
  		SELECT CLASS_YEAR||'0'||CLASS_TERM
		FROM CLASS
		JOIN SCHEDULE USING(CLASS_NO)
		WHERE STUDENT_NO = #{studentNo}
		GROUP BY CLASS_YEAR, CLASS_TERM
		ORDER BY CLASS_YEAR DESC, CLASS_TERM ASC
  	</select>
  	
  	<!-- 학생 개인시간표 -> 학기 선택 후 시간표 조회 -->
  	<select id="selectStudentTimetable" parameterType="hashmap" resultMap="classResultMap">
  		SELECT CLASS_NO, CLASS_NAME, PROFESSOR_NAME, S.DAY, S.PERIOD, CLASS_HOUR, CLASSROOM
		FROM CLASS C
		JOIN SCHEDULE S USING(CLASS_NO)
		LEFT JOIN PROFESSOR P USING(PROFESSOR_NO)
		WHERE CLASS_YEAR = #{year} AND CLASS_TERM = #{term} AND S.STUDENT_NO = #{studentNo}
		ORDER BY CLASS_NO, PERIOD
  	</select>
  	
  	<!-- (교수)강의개설 신청 리스트 조회-->
  	<select id="selectClassCreateList" resultMap="classResultMap">
  		SELECT CLASS_NO,FILE_NO,DIVISION,DEPARTMENT_NAME,CLASS_NAME,CLASS_YEAR,CLASS_TERM
        		,CLASSROOM,DECODE(DAY,1,'월',2,'화',3,'수',4,'목',5,'금') AS DAY
        		,DECODE(CLASS_HOUR,1,DECODE(PERIOD,1,'9:00~10:00',2,'10:00~11:00',3,'11:00~12:00',4,'12:00~13:00',5,'13:00~14:00',6,'14:00~15:00',7,'15:00~16:00',8,'16:00~17:00',9,'17:00~18:00',10,'18:00~19:00')
                                  ,2,DECODE(PERIOD,1,'9:00~11:00',2,'10:00~12:00',3,'11:00~13:00',4,'12:00~14:00',5,'13:00~15:00',6,'14:00~16:00',7,'15:00~17:00',8,'16:00~18:00',9,'17:00~19:00')) AS PERIOD
		        ,CLASS_LEVEL,CLASS_NOS,CREDIT,EXPLAIN,STATUS
		FROM CLASS 
		JOIN DEPARTMENT USING (DEPARTMENT_NO)
		WHERE PROFESSOR_NO LIKE '%'||#{professorNo}||'%'
		ORDER BY CLASS_NO DESC
  	</select>
  	
  	<!-- (교수)강의개설 첨부파일(강의계획서) 인서트 -->
  	<insert id="insertClassAttachment">
  		INSERT INTO ATTACHMENT(FILE_NO,ORIGIN_NAME,CHANGE_NAME,FILE_PATH,UPLOAD_DATE)
		VALUES(SEQ_ANO.NEXTVAL,#{originName},#{changeName},#{filePath},SYSDATE)
  	</insert>
  	
  	<!-- (교수)강의개설 신청 인서트 -->
  	<insert id="insertClassCreate">
  		INSERT INTO CLASS(CLASS_NO, PROFESSOR_NO, DEPARTMENT_NO, FILE_NO,CLASS_NAME, CLASS_LEVEL, CLASS_YEAR, CLASS_TERM, CLASSROOM, DAY, PERIOD, CLASS_HOUR, CLASS_NOS, CREDIT, DIVISION)
		VALUES(SEQ_CNO.NEXTVAL,#{professorNo}
				,(SELECT DEPARTMENT_NO FROM DEPARTMENT WHERE DEPARTMENT_NAME = #{departmentNo})
				,SEQ_ANO.CURRVAL,#{className},#{classLevel},#{classYear},#{classTerm}
				,#{classroom},#{day},#{period},#{classHour},#{classNos},#{credit},#{division})
  	</insert>
  	
  	<!-- (관리자)강의개설 첨부파일 리스트 -->
  	<select id="selectClassAttList" resultMap="attachmentResultSet">
  		SELECT FILE_NO,ORIGIN_NAME,CHANGE_NAME,FILE_PATH,UPLOAD_DATE
		FROM ATTACHMENT
		WHERE FILE_NO IN (SELECT FILE_NO FROM CLASS)
		ORDER BY FILE_NO DESC
  	</select>
  	
  	<!-- 교수 개인시간표 -> 학년도,학기 조회 -->
  	<select id="selectProfessorClassTerm" resultType="string">
  		SELECT CLASS_YEAR||'0'||CLASS_TERM
		FROM CLASS
		JOIN PROFESSOR USING(PROFESSOR_NO)
		WHERE PROFESSOR_NO = #{professorNo}
		GROUP BY CLASS_YEAR, CLASS_TERM
		ORDER BY CLASS_YEAR DESC, CLASS_TERM ASC
  	</select>
  	
  	<!-- 교수 개인시간표 -> 학기 선택 후 시간표 조회 -->
  	<select id="selectProfessorTimetable" parameterType="hashmap" resultMap="classResultMap">
  		SELECT CLASS_NO, CLASS_NAME, PROFESSOR_NAME, DAY, PERIOD, CLASS_HOUR, CLASSROOM
		FROM CLASS C
		JOIN PROFESSOR P USING(PROFESSOR_NO)
		WHERE CLASS_YEAR = #{year} AND CLASS_TERM = #{term} AND PROFESSOR_NO = #{professorNo}
  	</select>
  	
  	<!-- 성적관리 -> 학점별로 몇명이 해당되는지 -->
  	<select id="countStudentGrade" parameterType="_int" resultMap="gradeCountHashMap">
  		SELECT SUM(CLASS_NOS)/COUNT(*) AS ALL_COUNT, SUM(COUNT), NVL(SUM(CASE WHEN GRADE='A' THEN COUNT END),0) AS A_COUNT, NVL(SUM(CASE WHEN GRADE='B' THEN COUNT END),0) AS B_COUNT
		    , NVL(SUM(CASE WHEN GRADE='C' THEN COUNT END),0) AS C_COUNT, NVL(SUM(CASE WHEN GRADE='D' THEN COUNT END),0) AS D_COUNT, NVL(SUM(CASE WHEN GRADE='F' THEN COUNT END),0) AS F_COUNT
		FROM (SELECT SUBSTR(GRADE_LEVEL,1,1) AS GRADE, COUNT(*) AS COUNT, CLASS_NOS
		        FROM (SELECT A.STUDENT_NO, NVL(SCORE, 0) AS SCORE, NVL(GRADE_LEVEL,' ') AS GRADE_LEVEL, CLASS_NOS
		                FROM (SELECT CLASS_NO, STUDENT_NO
		                      FROM SCHEDULE
		                      GROUP BY CLASS_NO, STUDENT_NO) A
		                JOIN CLASS C ON(A.CLASS_NO = C.CLASS_NO)
		                LEFT JOIN GRADE G ON(A.STUDENT_NO = G.STUDENT_NO AND C.CLASS_NO = G.CLASS_NO)
		                WHERE A.CLASS_NO = #{classNo}) AA
		        GROUP BY SUBSTR(GRADE_LEVEL,1,1), CLASS_NOS)
  	</select>
  	
  	<!-- 성적관리 -> 수강중인 학생 조회 -->
  	<select id="selectStudentGradeList" parameterType="_int" resultMap="gradeHashMap">
  		SELECT DEPARTMENT_NAME, A.STUDENT_NO, CLASS_LEVEL, STUDENT_NAME, NVL(SCORE, 0) AS SCORE, NVL(GRADE_LEVEL,' ') AS GRADE_LEVEL
		FROM (SELECT CLASS_NO, STUDENT_NO
		        FROM SCHEDULE
		        GROUP BY CLASS_NO, STUDENT_NO) A
		JOIN STUDENT S ON(A.STUDENT_NO = S.STUDENT_NO)
		LEFT JOIN GRADE G ON(A.STUDENT_NO = G.STUDENT_NO AND A.CLASS_NO = G.CLASS_NO)
		JOIN DEPARTMENT D USING(DEPARTMENT_NO)
		WHERE A.CLASS_NO = #{classNo}
		ORDER BY STUDENT_NAME
  	</select>
  	
  	<!-- 성적관리 -> 수강인원*비율에 따른 가능 인원 수 -->
  	<select id="checkGradeNos" parameterType="hashmap" resultType="_int">
  		<choose>
  			<when test="gradeLevel == 'A'.toString()">
  				SELECT FLOOR(CLASS_NOS*0.3)
  			</when>
  			<otherwise>
  				SELECT FLOOR(CLASS_NOS*0.7)
  			</otherwise>
  		</choose>
		FROM CLASS
		WHERE CLASS_NO = #{classNo}
  	</select>
  	
  	<!-- 성적관리 -> 실제 몇명이 해당되는지 -->
  	<select id="countGradeNos" parameterType="hashmap" resultType="_int">
  		SELECT NVL(SUM(COUNT), 0)
		FROM (SELECT SUBSTR(GRADE_LEVEL,1,1) AS GRADE, COUNT(*) AS COUNT
		        FROM (SELECT A.STUDENT_NO, NVL(SCORE, 0) AS SCORE, NVL(GRADE_LEVEL,' ') AS GRADE_LEVEL, CLASS_NOS
		                FROM (SELECT CLASS_NO, STUDENT_NO
		                      FROM SCHEDULE
		                      GROUP BY CLASS_NO, STUDENT_NO) A
		                JOIN CLASS C ON(A.CLASS_NO = C.CLASS_NO)
		                LEFT JOIN GRADE G ON(A.STUDENT_NO = G.STUDENT_NO AND C.CLASS_NO = G.CLASS_NO)
		                WHERE A.CLASS_NO = #{classNo}) AA
		        GROUP BY SUBSTR(GRADE_LEVEL,1,1))
		<if test="gradeLevel == 'A'.toString()">
			WHERE GRADE IN ('A')
		</if>
		<if test="gradeLevel == 'B'.toString()">
			WHERE GRADE IN ('A', 'B')
		</if>
  	</select>
  	
  	<!-- 성적관리 -> 성적 입력 -->
  	<insert id="gradeInsert" parameterType="grade">
  		INSERT INTO GRADE VALUES(SEQ_GNO.NEXTVAL, #{studentNo}, #{classNo}
  								, (SELECT CLASS_YEAR FROM CLASS WHERE CLASS_NO = #{classNo})
  								, (SELECT CLASS_TERM FROM CLASS WHERE CLASS_NO = #{classNo})
  								, #{score}, #{gradeLevel})
  	</insert>
  	
  	<!-- 성적관리 -> 성적 수정 -->
  	<update id="gradeUpdate" parameterType="grade">
  		UPDATE GRADE
  		SET SCORE = #{score}
  		  , GRADE_LEVEL = #{gradeLevel}
  		WHERE STUDENT_NO = #{studentNo} AND CLASS_NO = #{classNo}
  	</update>
  	
  	<!-- 학기별 성적 조회 -> 학기 선택 후 강의 조회 -->
  	<select id="selectClassList" parameterType="hashmap" resultMap="gradeHashMap">
  		SELECT C.CLASS_YEAR, C.CLASS_TERM, C.CLASS_NO, CLASS_NAME, PROFESSOR_NAME, CREDIT, NVL(SCORE, 0) AS SCORE, NVL(GRADE_LEVEL,' ') AS GRADE_LEVEL
		FROM (SELECT CLASS_NO, STUDENT_NO
		        FROM SCHEDULE
		        GROUP BY CLASS_NO, STUDENT_NO) A
		JOIN CLASS C ON(A.CLASS_NO = C.CLASS_NO)
		LEFT JOIN GRADE G ON(A.CLASS_NO = G.CLASS_NO AND A.STUDENT_NO = G.STUDENT_NO)
		JOIN PROFESSOR P USING(PROFESSOR_NO)
		WHERE C.CLASS_YEAR = #{year} AND C.CLASS_TERM = #{term} AND A.STUDENT_NO = #{studentNo}
		ORDER BY CLASS_NAME
  	</select>
  	
  	<!-- 강의개설 일괄승인(관리자) -->
  	<update id="updateClassPermitAll">
  		UPDATE CLASS
  		SET STATUS = 'Y'
  		WHERE CLASS_NO IN 
  		<foreach collection="array" item="arr" open="(" close=")" separator=",">
 			#{arr}
		</foreach>
  	</update>
  	
  	<!-- 강의개설 개별승인(관리자) -->
  	<update id="updateClassPermit">
  		UPDATE CLASS
  		SET STATUS = 'Y'
  		WHERE CLASS_NO = #{cno}
  	</update>
  	
  	<!-- 강의개설 반려 (관리자) -->
  	<update id="updateClassReject">
  		UPDATE CLASS
  		SET STATUS = 'C'
  		,	EXPLAIN = #{explain}
  		WHERE CLASS_NO = #{classNo}
  		AND STATUS = 'B'
  	</update>
  	
  	<!-- 강의 개설 검색(관리자) -->
  	<select id="selectSearchClassList" resultMap="classResultMap">
  		SELECT CLASS_NO,FILE_PATH||CHANGE_NAME AS FILE_NO,DIVISION,DEPARTMENT_NAME,CLASS_NAME,CLASS_YEAR,CLASS_TERM
        		,PROFESSOR_NAME,CLASSROOM,DECODE(DAY,1,'월',2,'화',3,'수',4,'목',5,'금') AS DAY
        		,DECODE(CLASS_HOUR,1,DECODE(PERIOD,1,'9:00~10:00',2,'10:00~11:00',3,'11:00~12:00',4,'12:00~13:00',5,'13:00~14:00',6,'14:00~15:00',7,'15:00~16:00',8,'16:00~17:00',9,'17:00~18:00',10,'18:00~19:00')
                                  ,2,DECODE(PERIOD,1,'9:00~11:00',2,'10:00~12:00',3,'11:00~13:00',4,'12:00~14:00',5,'13:00~15:00',6,'14:00~16:00',7,'15:00~17:00',8,'16:00~18:00',9,'17:00~19:00')) AS PERIOD
		        ,CLASS_LEVEL,CLASS_NOS,CREDIT,EXPLAIN,CL.STATUS
		FROM CLASS CL
		JOIN DEPARTMENT D USING (DEPARTMENT_NO)
		JOIN PROFESSOR P USING (PROFESSOR_NO)
		LEFT JOIN ATTACHMENT A ON (A.FILE_NO=CL.FILE_NO)
		WHERE P.PROFESSOR_NAME LIKE '%'||#{professorNo}||'%'
        AND CL.STATUS IN 
        
        <choose>
        	<when test="status=='B,C'">
        		('B','C')
        	</when>
        	<when test="status=='Y,N'">
        		('Y','N')
        	</when>
        	<otherwise>
        		('B','C','Y','N')
        	</otherwise>
        </choose>
        
        AND DIVISION LIKE 
        <choose>
        	<when test="division==2">
        		'%'||'%'	
        	</when>
        	<otherwise>
        		'%'||#{division}||'%'
        	</otherwise>
        </choose>
        AND CLASS_NAME LIKE '%'||#{className}||'%'
        AND DEPARTMENT_NAME LIKE '%'||#{departmentNo}||'%'
		ORDER BY CLASS_NO DESC
  	</select>
  	
  	<!-- 반려당한 강의 수정위해 조회(교수) -->
  	<select id="selectRejectedClass" resultMap="classResultMap">
  		SELECT CLASS_NO, PROFESSOR_NAME, DEPARTMENT_NAME, C.FILE_NO,CLASS_NAME, CLASS_LEVEL, CLASS_YEAR, CLASS_TERM, CLASSROOM, DAY, PERIOD, CLASS_HOUR, CLASS_NOS, CREDIT, DIVISION, EXPLAIN, C.STATUS
  		FROM CLASS C
        JOIN DEPARTMENT D USING (DEPARTMENT_NO)
  		JOIN PROFESSOR P USING (PROFESSOR_NO)
  		WHERE CLASS_NO = #{classNo}
        AND C.STATUS = 'C'
  	</select>
  	
  	<!-- 반려당한 강의 첨부파일(강의계획서) 조회(교수) -->
  	<select id="selectRejectedClassAtt" resultMap="attachmentResultSet">
  		SELECT *
  		FROM ATTACHMENT
  		WHERE FILE_NO = #{fileNo}
  	</select>
  	
  	<!-- 반려된 강의 수정(새로운 첨부파일이 없는경우) -->
  	<update id="updateClassCreateNoAtt">
  		UPDATE CLASS
  		SET FILE_NO=#{fileNo},CLASS_NAME=#{className},DIVISION = #{division}, CREDIT = #{credit}, CLASS_NOS = #{classNos}
  		,	CLASSROOM = #{classroom}, DAY = #{day}, PERIOD = #{period}
  		,	CLASS_HOUR = #{classHour},CLASS_LEVEL = #{classLevel},STATUS = 'B'
  		WHERE CLASS_NO = #{classNo}
  	</update>
  	
  	<!-- 반려된 강의 첨부파일 수정(기존 첨부파일이 있는경우) -->
  	<update id="updateClassAttachment">
  		UPDATE ATTACHMENT
  		SET ORIGIN_NAME = #{originName}
  		,	CHANGE_NAME = #{changeName}
  		, FILE_PATH = #{filePath}
  		,UPLOAD_DATE = SYSDATE
  		WHERE FILE_NO = #{fileNo}
  	</update>
  	
  	<!-- 반려된 강의 첨부파일 수정(기존 첨부파일이 없는경우) -->
  	<update id="UpdateClassNewAttNoOrigin">
  		UPDATE CLASS
  		SET FILE_NO = SEQ_ANO.CURRVAL,CLASS_NAME=#{className},DIVISION = #{division}, CREDIT = #{credit}
  		, CLASS_NOS = #{classNos},	CLASSROOM = #{classroom}, DAY = #{day}
  		, PERIOD = #{period},	CLASS_HOUR = #{classHour}
  		,CLASS_LEVEL = #{classLevel},STATUS = 'B'
  		WHERE CLASS_NO = #{classNo}
  		
  	</update>
  	
  	<insert id="insertStudent">
  	INSERT INTO STUDENT (STUDENT_NO, DEPARTMENT_NO, COLLEGE_NO, ENTRANCE_DATE, STUDENT_NAME, STUDENT_PWD, PHONE, EMAIL, POST, ADDRESS,CLASS_LEVEL)
	VALUES (('S'||TO_CHAR(SYSDATE, 'YYYY')||LPAD(SEQ_SNO.NEXTVAL,4,0)),(SELECT DEPARTMENT_NO FROM DEPARTMENT WHERE DEPARTMENT_NAME = #{departmentNo}), #{collegeNo}, #{entranceDate}, #{studentName}, #{studentPwd}, #{phone}, #{email}, #{post}, #{address}, #{classLevel})
  	</insert>
  	
  	<select id="studentGradeReport" resultType="Dissent"> 
  	SELECT C.CLASS_NAME, C.CLASS_NO, P.PROFESSOR_NAME, C.CREDIT, D.REASON
	FROM DISSENT D
	JOIN CLASS C ON D.CLASS_NO = C.CLASS_NO
	JOIN PROFESSOR P ON C.PROFESSOR_NO = P.PROFESSOR_NO
	WHERE D.STUDENT_NO = #{student_no}
  	</select>
  	
  	<insert id="insertProfessor">
  	INSERT INTO PROFESSOR(PROFESSOR_NO, DEPARTMENT_NO, COLLEGE_NO, PROFESSOR_NAME, PROFESSOR_PWD, POSITION, ENTRANCE_DATE, PHONE, EMAIL, POST, ADDRESS, ACCOUNT_NO, ADMIN)
  	VALUES (('P'||TO_CHAR(SYSDATE, 'YYYY')||LPAD(SEQ_PNO.NEXTVAL,4,0)), (SELECT DEPARTMENT_NO FROM DEPARTMENT WHERE DEPARTMENT_NAME = #{departmentNo}), #{collegeNo}, #{professorName}, #{professorPwd}, #{position}, #{entranceDate}, #{phone}, #{email}, #{post}, #{address}, #{accountNo}, #{admin})
	</insert>
  	
  	<!-- 학기별 성적 조회 -> 학기별 성적 계산 -->
  	<select id="calculatedGrade" parameterType="hashmap" resultMap="termGradeHashMap">
  		SELECT CLASS_YEAR, CLASS_TERM, NVL(SUM(CREDIT), 0) AS SIGN_UP, NVL(SUM(CASE WHEN GRADE_LEVEL NOT IN ('F', ' ') THEN CREDIT ELSE 0 END), 0) AS OBTAIN
		        , ROUND(NVL(SUM(GRADE)/SUM(CREDIT), 0), 2) AS TERM_GRADE
		FROM (SELECT A.CLASS_NO, PROFESSOR_NO, CLASS_NAME, C.CLASS_YEAR, C.CLASS_TERM, CREDIT, SCORE, GRADE_LEVEL
		        , DECODE(GRADE_LEVEL, 'A+', 4.5, 'A0', 4.3, 'A-', 4.0, 'B+', 3.5, 'B0', 3.3, 'B-', 3.0, 'C+', 2.5, 'C0', 2.3, 'C-', 2.0, 'D+', 1.5, 'D0', 1.3, 'D-', 1.0, 'F', 0)*CREDIT AS GRADE
		        FROM (SELECT CLASS_NO, STUDENT_NO
		                FROM SCHEDULE
		                GROUP BY CLASS_NO, STUDENT_NO) A
		        JOIN CLASS C ON(A.CLASS_NO = C.CLASS_NO)
		        LEFT JOIN GRADE G ON(A.STUDENT_NO = G.STUDENT_NO AND A.CLASS_NO = G.CLASS_NO)
		        WHERE A.STUDENT_NO = #{studentNo} AND C.CLASS_YEAR = #{year} AND C.CLASS_TERM = #{term})
		GROUP BY CLASS_YEAR, CLASS_TERM
  	</select>
  	
  	<!-- 학기별 성적 조회 -> 학기별석차 -->
  	<select id="calculatedTermRank" parameterType="hashmap" resultType="string">
  		SELECT RANK||'/'||TOTAL_STUDENTS
		FROM (SELECT AA.*, COUNT(*) OVER () AS TOTAL_STUDENTS
		    FROM (SELECT CLASS_YEAR, CLASS_TERM, STUDENT_NO, ROUND(NVL(SUM(GRADE)/SUM(CREDIT), 0), 2) AS TERM_GRADE, RANK() OVER (ORDER BY ROUND(NVL(SUM(GRADE)/SUM(CREDIT), 0), 2) DESC) AS RANK
		            FROM (SELECT A.STUDENT_NO, C.CLASS_YEAR, C.CLASS_TERM, CREDIT, SCORE, GRADE_LEVEL
		                    , DECODE(GRADE_LEVEL, 'A+', 4.5, 'A0', 4.3, 'A-', 4.0, 'B+', 3.5, 'B0', 3.3, 'B-', 3.0, 'C+', 2.5, 'C0', 2.3, 'C-', 2.0, 'D+', 1.5, 'D0', 1.3, 'D-', 1.0, 'F', 0)*CREDIT AS GRADE
		                    FROM (SELECT CLASS_NO, STUDENT_NO
		                            FROM SCHEDULE
		                            GROUP BY CLASS_NO, STUDENT_NO) A
		                    JOIN CLASS C ON(A.CLASS_NO = C.CLASS_NO)
		                    LEFT JOIN GRADE G ON(A.STUDENT_NO = G.STUDENT_NO AND A.CLASS_NO = G.CLASS_NO)
			                WHERE C.CLASS_YEAR = #{year} AND C.CLASS_TERM = #{term} AND SCORE IS NOT NULL)
		            GROUP BY CLASS_YEAR, CLASS_TERM, STUDENT_NO
		            ORDER BY TERM_GRADE DESC) AA)
		WHERE STUDENT_NO = #{studentNo}
  	</select>
  	
  	<!-- 학기별 성적 조회 -> 전체석차 -->
  	<select id="calculatedTotalRank" parameterType="hashmap" resultType="string">
  		SELECT RANK||'/'||TOTAL_STUDENTS
		FROM (SELECT AA.*, COUNT(*) OVER () AS TOTAL_STUDENTS
		        FROM (SELECT CLASS_YEAR, CLASS_TERM, STUDENT_NO, ROUND(NVL(SUM(GRADE)/SUM(CREDIT), 0), 2) AS TERM_GRADE, RANK() OVER (ORDER BY ROUND(NVL(SUM(GRADE)/SUM(CREDIT), 0), 2) DESC) AS RANK
		                FROM (SELECT A.STUDENT_NO, C.CLASS_YEAR, C.CLASS_TERM, CREDIT, SCORE, GRADE_LEVEL
		                        , DECODE(GRADE_LEVEL, 'A+', 4.5, 'A0', 4.3, 'A-', 4.0, 'B+', 3.5, 'B0', 3.3, 'B-', 3.0, 'C+', 2.5, 'C0', 2.3, 'C-', 2.0, 'D+', 1.5, 'D0', 1.3, 'D-', 1.0, 'F', 0)*CREDIT AS GRADE
		                        FROM (SELECT CLASS_NO, STUDENT_NO
		                                FROM SCHEDULE
		                                GROUP BY CLASS_NO, STUDENT_NO) A
		                        JOIN CLASS C ON(A.CLASS_NO = C.CLASS_NO)
		                        LEFT JOIN GRADE G ON(A.STUDENT_NO = G.STUDENT_NO AND A.CLASS_NO = G.CLASS_NO)
		                        WHERE SCORE IS NOT NULL)
		                GROUP BY CLASS_YEAR, CLASS_TERM, STUDENT_NO
		                <![CDATA[HAVING CLASS_YEAR <= #{year} AND CLASS_TERM <= #{term}]]>
		                ORDER BY TERM_GRADE DESC) AA)
		WHERE STUDENT_NO = #{studentNo}
  	</select>
  	
  	<!-- 학기별 성적 조회 -> 증명신청학점, 증명취득학점 -->
  	<select id="selectScoreAB" parameterType="string" resultMap="termGradeHashMap">
  		SELECT NVL(SUM(CREDIT), 0) AS SIGN_UP, NVL(SUM(CASE WHEN GRADE_LEVEL NOT IN ('F', ' ') THEN CREDIT ELSE 0 END), 0) AS OBTAIN
		FROM (SELECT CLASS_NO, STUDENT_NO
		        FROM SCHEDULE
		        GROUP BY CLASS_NO, STUDENT_NO) A
		JOIN CLASS C ON(A.CLASS_NO = C.CLASS_NO)
		LEFT JOIN GRADE G ON(A.STUDENT_NO = G.STUDENT_NO AND A.CLASS_NO = G.CLASS_NO)
		WHERE A.STUDENT_NO = #{studentNo}
  	</select>

  	<!-- 학기별 성적 조회 -> 증명평점평균 -->
  	<select id="selectScoreC" parameterType="string" resultType="_double">
  		SELECT ROUND(NVL(SUM(GRADE)/SUM(CREDIT), 0), 2)
		FROM (SELECT DECODE(GRADE_LEVEL, 'A+', 4.5, 'A0', 4.3, 'A-', 4.0, 'B+', 3.5, 'B0', 3.3, 'B-', 3.0, 'C+', 2.5, 'C0', 2.3, 'C-', 2.0, 'D+', 1.5, 'D0', 1.3, 'D-', 1.0)*CREDIT AS GRADE, CREDIT
		        FROM (SELECT CLASS_NO, STUDENT_NO
		                FROM SCHEDULE
		                GROUP BY CLASS_NO, STUDENT_NO) A
		        JOIN CLASS C ON(A.CLASS_NO = C.CLASS_NO)
		        LEFT JOIN GRADE G ON(A.STUDENT_NO = G.STUDENT_NO AND A.CLASS_NO = G.CLASS_NO)
		        WHERE A.STUDENT_NO = #{studentNo} AND GRADE_LEVEL NOT IN ('F', ' ')) AA
  	</select>
  	
  	<!-- 학기별 성적 조회 -> 증명산술평균 -->
  	<select id="selectScoreD" parameterType="string" resultType="_double">
  		SELECT ROUND(NVL(SUM(SCORE*CREDIT)/SUM(CREDIT), 0), 2)
		FROM (SELECT CLASS_NO, STUDENT_NO
		        FROM SCHEDULE
		        GROUP BY CLASS_NO, STUDENT_NO) A
		JOIN CLASS C ON(A.CLASS_NO = C.CLASS_NO)
		LEFT JOIN GRADE G ON(A.STUDENT_NO = G.STUDENT_NO AND A.CLASS_NO = G.CLASS_NO)
		WHERE A.STUDENT_NO = #{studentNo} AND GRADE_LEVEL NOT IN ('F', ' ')
  	</select>
  	
	<resultMap type="classRating" id="classRatingResultMap">
  		<result column="CLASS_NO" property="classNo"/>
  		<result column="CLASS_NAME" property="className"/>
  		<result column="PROFESSOR_NAME" property="professorName"/>
  		<result column="CLASS_YEAR" property="classYear"/>
  		<result column="CLASS_TERM" property="classTerm"/>
  		<result column="STATUS" property="status"/>
  		<result column="RATING_NO" property="ratingNo"/>
  		<result column="ETC" property="etc"/>
  		
  		<result column="Q1" property="q1"/>
  		<result column="Q2" property="q2"/>
  		<result column="Q3" property="q3"/>
  		<result column="Q4" property="q4"/>
  		<result column="Q5" property="q5"/>
  		<result column="Q6" property="q6"/>
  		<result column="Q7" property="q7"/>
  		<result column="Q8" property="q8"/>
  		
  		<result column="CREDIT" property="credit"/>
  		<result column="CLASS_NOS" property="classNos"/>
  		<result column="AVERAGE_RATING" property="averageRating"/>
  	</resultMap>
  	<!-- (학생) 강의평가를 위한 강의정보 조회 -->
  	<select id="classInfoForRating" resultMap="classRatingResultMap">
  		SELECT CLASS_NO,C.CLASS_NAME,P.PROFESSOR_NAME,C.CLASS_YEAR,C.CLASS_TERM,CR.STATUS
		FROM SCHEDULE S
		JOIN CLASS C USING(CLASS_NO)
		JOIN PROFESSOR P USING(PROFESSOR_NO)
		RIGHT JOIN CLASS_RATING CR USING(CLASS_NO) <!-- 값이 없고 있을때를 판별 -->
		WHERE S.STUDENT_NO = #{studentNo}
		AND CLASS_YEAR = #{classYear}
		AND CLASS_TERM = #{classTerm}
  	</select>
  	<!-- (학생) 강의 평가 입력  -->
  	<insert id="insertClassRating">
  		INSERT INTO CLASS_RATING
  		VALUES (SEQ_CRNO.NEXTVAL
  				,#{classNo}
  				,#{studentNo}
  				,#{q1}
  				,#{q2}
  				,#{q3}
  				,#{q4}
  				,#{q5}
  				,#{q6}
  				,#{q7}
  				,#{q8}
  				,#{etc},'Y')
  	</insert>
  	<!-- (관리자) 강의평가 조회 -->
  	<select id="classRatingList" resultMap="classRatingResultMap">
  		SELECT CLASS_NO,C.CLASS_NAME,PROFESSOR_NAME,CREDIT,CLASS_NOS,AVERAGE_RATING
  		FROM (SELECT CLASS_NO,AVG((Q1+Q2+Q3+Q4+Q5+Q6+Q7+Q8)/8)"AVERAGE_RATING"
                FROM CLASS_RATING
                GROUP BY CLASS_NO)"CR"
  		JOIN CLASS C USING(CLASS_NO)
  		JOIN PROFESSOR P USING(PROFESSOR_NO)
  		WHERE C.CLASS_YEAR = #{classYear}
  		AND C.CLASS_TERM = #{classTerm}
  		AND C.CLASS_NAME LIKE '%'||#{className}||'%'
  	</select>
  	<!-- (관리자)강의평가 기타건의사항 조회 -->
  	<select id="classRatingEtcList" resultMap="classRatingResultMap">
		SELECT CLASS_NO , CLASS_NAME , PROFESSOR_NAME , ETC  
		FROM CLASS_RATING
		JOIN CLASS USING(CLASS_NO)
		JOIN PROFESSOR USING(PROFESSOR_NO)
		WHERE CLASS_NO = #{classNo}
		AND CLASS_YEAR = #{classYear}
		AND CLASS_TERM = #{classTerm}
  	</select>
  	<!-- (관리자) 강의평가 문항별 평균 점수 조회 -->
  	<select id="classRatingAverage" resultMap="classRatingResultMap">
  		SELECT ROUND(AVG(Q1),1) "Q1",ROUND(AVG(Q2),1) "Q2",ROUND(AVG(Q3),1) "Q3",ROUND(AVG(Q4),1) "Q4",ROUND(AVG(Q5),1) "Q5",ROUND(AVG(Q6),1) "Q6",ROUND(AVG(Q7),1) "Q7",ROUND(AVG(Q8),1) "Q8" 
		FROM CLASS_RATING
		JOIN CLASS USING(CLASS_NO)
		WHERE CLASS_NO = #{classNo}
		AND CLASS_YEAR = #{classYear}
		AND CLASS_TERM = #{classTerm}
  		GROUP BY CLASS_NO
  		
  	</select>
  	
  	<!-- 학사일정 관리 -> 학사일정 조회 -->
  	<select id="calendarList" resultMap="calendarList">
  		SELECT CALENDAR_NO, CONTENT, TO_CHAR(START_DATE, 'YYYY-MM-DD') AS START_DATE, TO_CHAR(END_DATE+1, 'YYYY-MM-DD') AS END_DATE
  		FROM CALENDAR
  	</select>
  	
  	<!-- 학사일정 관리 -> 학사일정 추가 -->
  	<insert id="insertCalendar">
  		INSERT INTO CALENDAR VALUES(SEQ_CALNO.NEXTVAL, #{content}
  				, TO_DATE(SUBSTR(#{startDate}, 0, 10)||SUBSTR(#{startDate}, 12), 'YYYY-MM-DD HH24:MI')
  				, TO_DATE(SUBSTR(#{endDate}, 0, 10)||SUBSTR(#{endDate}, 12), 'YYYY-MM-DD HH24:MI'))
  	</insert>
  </mapper>

