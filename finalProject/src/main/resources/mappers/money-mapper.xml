<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
  PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
  "https://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="moneyMapper">
	
	<resultMap type="registPay" id="registPayResultSet">
		<result column="REG_NO" property="regNo"/>
		<result column="STUDENT_NO" property="studentNo"/>
		<result column="REG_ACCOUNT_NO" property="regAccountNo"/>
		<result column="MUST_PAY" property="mustPay"/>
		<result column="INPUT_PAY" property="inputPay"/>
		<result column="CLASS_YEAR" property="classYear"/>
		<result column="CLASS_TERM" property="classTerm"/>
		<result column="PAY_ACCOUNT_NO" property="payAccountNo"/>
		<result column="PAY_DATE" property="payDate"/>
		<result column="START_DATE" property="startDate"/>
		<result column="END_DATE" property="endDate"/>
		<result column="PAY_STATUS" property="payStatus"/>
		<result column="STATUS" property="status"/>
		
		<!-- MUST_PAY - INPUT_PAY -->
		<result column="NON_PAID_AMOUNT" property="NonPaidAmount"/>
		<result column="PAYTIME" property="payTime"/>
		<result column="PHONE" property="studentPhone"/>
		<result column="EMAIL" property="studentEmail"/> 
		<result column="STUDENT_NAME" property="studentName"/>
	</resultMap>
	
	<resultMap type="salary" id="salaryResultSet">
		<result column="PAY_NO" property="payNo"/>
		<result column="PROFESSOR_NO" property="professorNo"/>
		<result column="PAYMENT_DATE" property="paymentDate"/>
		
		<result column="BASE_PAY" property="basePay"/>
		<result column="POSITION_PAY" property="positionPay"/>
		<result column="EXTENSION_PAY" property="extensionPay"/>
		<result column="HOLIDAY_PAY" property="holidayPay"/>
		<result column="RESEARCH_PAY" property="researchPay"/>
		<result column="PAYMENT_TOTAL" property="paymentTotal"/>
		
		<result column="NATIONAL_TAX" property="nationalTax"/>
		<result column="HEALTH_TAX" property="healthTax"/>
		<result column="EMPLOY_TAX" property="employTax"/>
		<result column="INCOME_TAX" property="incomeTax"/>
		<result column="DEDUCT_TOTAL" property="deductTotal"/>
		
		<result column="REAL_PAY" property="realPay"/>
		<result column="STATUS" property="status"/>
		
		<result column="PROFESSOR_NAME" property="professorName"/>
		<result column="POSITION" property="position"/>
		<result column="ACCOUNT_NO" property="accountNo"/>
		<result column="PHONE" property="phone"/>
		
	</resultMap>
	
	<resultMap type="scholarship" id="scholarshipResultSet">
		<result column="SCH_NO" property="schNo"/>
		<result column="STUDENT_NO" property="studentNo"/>
		<result column="SCH_CATEGORY_NO" property="schCategoryNo"/>
		<result column="SCH_AMOUNT" property="schAmount"/>
		<result column="CLASS_YEAR" property="classYear"/>
		<result column="CLASS_TERM" property="classTerm"/>
		<result column="PRO_DATE" property="proDate"/>
		<result column="STATUS" property="status"/>
		<result column="ETC" property="etc"/>
		
		<result column="STUDENT_NAME" property="studentName"/>
	</resultMap>
	
	<!-- (학생) 본인 장학금 정보 모두 조회  -->
	<select id="selectMyScholarshipList" resultMap="scholarshipResultSet">
		SELECT SCH_NO
		      ,STUDENT_NO
		      ,SCH_CATEGORY_NO
		      ,SCH_AMOUNT
		      ,CLASS_YEAR
		      ,CLASS_TERM
		      ,PRO_DATE
		      ,SC.STATUS
		      ,ETC
		      ,STUDENT_NAME
        FROM SCHOLARSHIP SC
		JOIN STUDENT USING(STUDENT_NO)
		WHERE STUDENT_NO = #{studentNo}
		<if test="classYear!=0">
			AND CLASS_YEAR = #{classYear}
		</if>
		AND SC.STATUS IN ('Y','W')
	</select>	
	
	<!-- (관리자) 장학금 정보 입력 -->
	<insert id="insertScholarship">
		INSERT INTO SCHOLARSHIP
		VALUES(SEQ_SCHNO.NEXTVAL,#{studentNo},#{schCategoryNo},#{schAmount},#{classYear},#{classTerm},SYSDATE,'W',#{etc})
	</insert>
	
	<!-- (관리자) 장학금 삭제 -->
	<delete id="deleteScholarship">
		DELETE SCHOLARSHIP
		WHERE SCH_NO = #{schNo}
		AND STATUS IN ('W','N')
	</delete>
	
	<!-- (관리자) 장학금 정보 상세조회 -->
	<select id="selectOneScholarship" parameterType="_int" resultMap="scholarshipResultSet">
		SELECT SCH_NO
		      ,STUDENT_NO
		      ,SCH_CATEGORY_NO
		      ,SCH_AMOUNT
		      ,CLASS_YEAR
		      ,CLASS_TERM
		      ,PRO_DATE
		      ,SC.STATUS
		      ,ETC
		      ,STUDENT_NAME
        FROM SCHOLARSHIP SC
		JOIN STUDENT USING(STUDENT_NO)
		WHERE SC.STATUS IN ('N','W')
		AND SCH_NO = #{schNo}
	</select>
	
	<!-- (관리자) 장학금정보 수정 -->
	<update id="updateScholarship">
		UPDATE SCHOLARSHIP
		SET SCH_CATEGORY_NO = #{schCategoryNo}
		   ,STUDENT_NO = #{studentNo}
		   ,SCH_AMOUNT = #{schAmount}
		   ,ETC = #{etc}
		WHERE SCH_NO = #{schNo}
	</update>
	
	<!-- (관리자) 장학금 정보 모두 조회/검색 -->
	<select id="selectScholarshipListAll" resultMap="scholarshipResultSet" parameterType="map">
		SELECT SCH_NO
		      ,STUDENT_NO
		      ,SCH_CATEGORY_NO
		      ,SCH_AMOUNT
		      ,CLASS_YEAR
		      ,CLASS_TERM
		      ,PRO_DATE
		      ,SC.STATUS
		      ,ETC
		      ,STUDENT_NAME
		FROM SCHOLARSHIP SC
		JOIN STUDENT USING(STUDENT_NO)
		<choose>
			<when test='filter=="classYear"'>
				WHERE CLASS_YEAR = #{keyword}
			</when>
			<when test='filter=="studentNo"'>
				WHERE STUDENT_NO LIKE '%'||#{keyword}||'%'
			</when>
			<when test='filter=="studentName"'>
				WHERE STUDENT_NAME LIKE '%'||#{keyword}||'%'
			</when>
			<when test='filter=="all"'>
				WHERE CLASS_YEAR = #{keyword}
				OR STUDENT_NO LIKE '%'||#{keyword}||'%' 
				OR STUDENT_NAME LIKE '%'||#{keyword}||'%'
			</when>
		</choose>
		ORDER BY SCH_NO DESC
	</select>
	
	<!-- (임직원) 급여정보 상세조회 -->
	<select id="selectMySalary" resultMap="salaryResultSet">
		SELECT PAY_NO
			  ,PROFESSOR_NO
			  ,PAYMENT_DATE
			  ,BASE_PAY
			  ,POSITION_PAY
			  ,EXTENSION_PAY
			  ,HOLIDAY_PAY
			  ,RESEARCH_PAY
			  ,PAYMENT_TOTAL
			  ,NATIONAL_TAX
			  ,HEALTH_TAX
			  ,EMPLOY_TAX
			  ,INCOME_TAX
			  ,DEDUCT_TOTAL
			  ,REAL_PAY
			  ,STATUS
		FROM PAY_STUB
		WHERE PROFESSOR_NO = #{professorNo}
		AND PAY_NO = #{payNo}
		AND STATUS = 'Y'
	</select>
	
	<!-- (임직원) 본인 급여정보 모두 조회 -->
	<select id="selectMySalaryList" resultMap="salaryResultSet">
		SELECT PAY_NO
			  ,PROFESSOR_NO
			  ,PAYMENT_DATE
			  ,BASE_PAY
			  ,POSITION_PAY
			  ,EXTENSION_PAY
			  ,HOLIDAY_PAY
			  ,RESEARCH_PAY
			  ,PAYMENT_TOTAL
			  ,NATIONAL_TAX
			  ,HEALTH_TAX
			  ,EMPLOY_TAX
			  ,INCOME_TAX
			  ,DEDUCT_TOTAL
			  ,REAL_PAY
			  ,STATUS 
		FROM PAY_STUB
		WHERE PROFESSOR_NO = #{professorNo}
		AND PAYMENT_DATE BETWEEN #{startDate} AND #{endDate}	  
	</select>
	
	<!-- (관리자) 급여정보 생성 -->
	<insert id="insertSalary">
		INSERT INTO PAY_STUB
		VALUES(SEQ_PAYNO.NEXTVAL
			  ,#{professorNo}
			  ,#{paymentDate}
			  ,#{basePay}
			  ,#{positionPay}
			  ,#{extensionPay}
			  ,#{holidayPay}
			  ,#{researchPay}
			  ,#{paymentTotal}
			  ,#{nationalTax}
			  ,#{healthTax}
			  ,#{employTax}
			  ,#{incomeTax}
			  ,#{deductTotal}
			  ,#{realPay}
			  ,'N'
			  )
	</insert>
	
	<!-- (관리자) 급여정보 수정 -->
	<update id="updateSalary">
		UPDATE PAY_STUB
		SET BASE_PAY = #{basePay}
		   ,POSITION_PAY = #{positionPay}
		   ,EXTENSION_PAY = #{extensionPay}
		   ,HOLIDAY_PAY = #{holidayPay}
		   ,RESEARCH_PAY = #{researchPay}
		   ,PAYMENT_TOTAL = #{paymentTotal}
		   ,NATIONAL_TAX = #{nationalTax}
		   ,HEALTH_TAX = #{healthTax}
		   ,EMPLOY_TAX = #{employTax}
		   ,INCOME_TAX = #{incomeTax}
		   ,DEDUCT_TOTAL = #{deductTotal}
		   ,REAL_PAY = #{realPay}  
		 WHERE PAY_NO = #{payNo}
		 AND STATUS IN ('N','E') 
	</update>
	
	<!-- (관리자) 급여정보 삭제 -->
	<delete id="deleteSalary" parameterType="_int">
		DELETE PAY_STUB
		WHERE PAY_NO = #{payNo}
		AND STATUS IN ('N','E') <!-- 이미 지급된 월급데이터는 삭제불가  -->
	</delete>
	
	<!-- (관리자) 급여정보 모두 조회/검색 -->
	<select id="selectAllSalaryList" resultMap="salaryResultSet">
		SELECT PAY_NO
			  ,PROFESSOR_NO
			  ,PAYMENT_DATE
			  ,RESEARCH_PAY
			  ,PAYMENT_TOTAL
			  ,DEDUCT_TOTAL
			  ,REAL_PAY
			  ,PS.STATUS
			  ,PROFESSOR_NAME 
			  ,POSITION
			  ,ACCOUNT_NO
		FROM PAY_STUB "PS"
		JOIN PROFESSOR "PF" USING (PROFESSOR_NO)
		WHERE PROFESSOR_NAME like '%'||#{professorName}||'%'
		<if test='status!="all"'>
			AND PS.STATUS = #{status}
		</if>
	</select>
	
	<!-- (관리자) 급여정보 1개 조회 -->
	<select id="selectOneSalary" resultMap="salaryResultSet" parameterType="_int"><!--수정,상세조회-->
		SELECT PAY_NO
			  ,PROFESSOR_NO
			  ,PAYMENT_DATE
			  ,BASE_PAY
			  ,POSITION_PAY
			  ,EXTENSION_PAY
			  ,HOLIDAY_PAY
			  ,RESEARCH_PAY
			  ,PAYMENT_TOTAL
			  ,NATIONAL_TAX
			  ,HEALTH_TAX
			  ,EMPLOY_TAX
			  ,INCOME_TAX
			  ,DEDUCT_TOTAL
			  ,REAL_PAY
			  ,PS.STATUS
			  ,PROFESSOR_NAME
			  ,POSITION
			  ,ACCOUNT_NO
			  ,PHONE
		FROM PAY_STUB PS
		JOIN PROFESSOR USING(PROFESSOR_NO)
		WHERE PAY_NO = #{payNo}
	</select>
	
	<resultMap type="professor" id="profResultSetForSalary">
		<result column="PROFESSOR_NO" property="professorNo"/>
		<result column="PROFESSOR_NAME" property="professorName"/>
		<result column="POSITION" property="position"/>
		<result column="PHONE" property="phone"/>
		<result column="ENTRANCE_DATE" property="entranceDate"/>
		<result column="EMAIL" property="email"/>
		<result column="ADDRESS" property="address"/>
		<result column="ACCOUNT_NO" property="accountNo"/>
	</resultMap>
	
	<!-- (관리자) 급여 입력을 위한 교수정보 조회 / 검색-->
	<select id="professorListToSalary" resultMap="profResultSetForSalary">
		SELECT PROFESSOR_NO
			  ,PROFESSOR_NAME
			  ,POSITION
			  ,PHONE
			  ,ENTRANCE_DATE
			  ,EMAIL
			  ,ADDRESS
			  ,ACCOUNT_NO
		FROM PROFESSOR
		WHERE PROFESSOR_NO LIKE '%'||#{professorNo}||'%' 
		AND PROFESSOR_NAME LIKE '%'||#{professorName}||'%'  
	</select>
	
	<!-- (관리자) 급여 송금 후 상태변경 -->
	<update id="sendSalary" parameterType="_int">
		UPDATE PAY_STUB
		SET STATUS = 'Y'
		WHERE PAY_NO = #{payNo}
		AND STATUS IN ('N','E')
	</update>
	
	<!-- (학생) 등록금 전체 정보 조회 -->
	<select id="selectMyRegistList" resultMap="registPayResultSet">
		SELECT REG_NO
			  ,STUDENT_NO
			  ,RG.REG_ACCOUNT_NO
			  ,MUST_PAY
			  ,INPUT_PAY
			  ,CLASS_YEAR
			  ,CLASS_TERM
			  ,RG.PAY_ACCOUNT_NO
			  ,TO_CHAR(PAY_DATE,'YYYY-MM-DD')"PAY_DATE"
			  ,START_DATE
			  ,END_DATE
			  ,PAY_STATUS
			  ,STUDENT_NAME
			  ,TO_CHAR(PAY_DATE,'HH:mm:ss') "PAYTIME"
			  ,RG.STATUS
		FROM REG_ACC RG
		JOIN STUDENT ST USING(STUDENT_NO)
		WHERE STUDENT_NO = #{studentNo}
		AND STUDENT_NAME = #{studentName}
		<if test="classTerm!=0"> 
		AND CLASS_TERM = #{classTerm}
		</if>
		<if test="classYear!=0">
		AND CLASS_YEAR = #{classYear}
		</if>
		<!-- AND START_DATE BETWEEN #{startDate} AND #{endDate}
		AND END_DATE BETWEEN #{startDate} AND #{endDate} -->
	</select>
	
	<!-- (학생) 해당학기 등록금 정보 조회  -->
	<select id="selectNewRegistInfo" resultMap="registPayResultSet">
		SELECT REG_NO 
			  ,STUDENT_NO
			  ,RG.REG_ACCOUNT_NO
			  ,MUST_PAY
			  ,INPUT_PAY
			  ,CLASS_YEAR
			  ,CLASS_TERM
			  ,RG.PAY_ACCOUNT_NO
			  ,TO_CHAR(PAY_DATE,'YYYY-MM-DD')"PAY_DATE"
			  ,START_DATE
			  ,END_DATE
			  ,PAY_STATUS
			  ,STUDENT_NAME
			  ,TO_CHAR(PAY_DATE,'HH:mm:ss') "PAYTIME"
			  ,RG.STATUS
		FROM REG_ACC RG
		JOIN STUDENT ST USING(STUDENT_NO)
		WHERE STUDENT_NO = #{studentNo}
		AND CLASS_YEAR = #{classYear}
		AND CLASS_TERM = #{classTerm}
	</select>
	
	<!-- (관리자) 등록금 입금 됐을때 상태변경  -->
	<update id="updateInputPay">
		UPDATE REG_ACC
		SET INPUT_PAY = #{inputPay}
		   ,PAY_ACCOUNT_NO = #{payAccountNo}
		   ,PAY_DATE = SYSDATE
	    <choose>
	    	<when test="inputPay eq mustPay">
	    		,PAY_STATUS = 'Y'
	    	</when>
	    	<when test="inputPay gt mustPay">
	    		,PAY_STATUS = 'O'
	    	</when>
	    	<when test="inputPay lt mustPay">
	    		,PAY_STATUS = 'D'
	    	</when>
	    </choose>
		WHERE STATUS = 'Y'
		AND REG_ACCOUNT_NO = #{regAccountNo}
	</update>
	
	<!-- (관리자) 등록금 정보 검색 -->
	<select id="searchRegistList" resultMap="registPayResultSet">
		SELECT REG_NO 
			  ,STUDENT_NO
			  ,RG.REG_ACCOUNT_NO
			  ,MUST_PAY
			  ,INPUT_PAY
			  ,CLASS_YEAR
			  ,CLASS_TERM
			  ,RG.PAY_ACCOUNT_NO
			  ,PAY_DATE
			  ,START_DATE
			  ,END_DATE
			  ,PAY_STATUS
			  ,STUDENT_NAME
		FROM REG_ACC RG
		JOIN STUDENT ST USING(STUDENT_NO)
		WHERE STUDENT_NAME LIKE '%'||#{keyword}||'%'
		<choose><!-- 조건되는지  확인할것 -->
			<when test='filter==1'>
				AND PAY_STATUS = 'Y'  
			</when>
			<when test='filter==2'>
				AND PAY_STATUS = 'O'  
			</when>
			<when test='filter==3'>
				AND PAY_STATUS = 'D'  
			</when>
			<when test='filter==4'>
				AND PAY_STATUS = 'N'  
			</when>
		</choose>
	</select>
	
	<!-- (관리자) 등록금정보 입력 -->
	<insert id="insertRegistPay">
		INSERT INTO REG_ACC
		VALUES(SEQ_RGNO.NEXTVAL
			  ,#{studentNo}
			  ,#{regAccountNo}<!-- 가상계좌... -->
			  ,#{mustPay}
			  ,0
			  ,#{classYear}
			  ,#{classTerm}
			  ,null
			  ,null
			  ,#{startDate}
			  ,#{endDate}
			  
			  <choose>
			  	<when test="mustPay==0"><!-- 내야할등록금이 0일때(장학금Max) -->
			  		,'Y'
			  	</when>
			  	<otherwise>
			  		,'N'	
			  	</otherwise>
			  </choose>
			  ,'N'
		)
	</insert>
	
	<!-- (관리자)수정용 등록금 정보 조회 -->
	<select id="selectOneRegistPay" resultMap="registPayResultSet">
		SELECT REG_NO 
			  ,STUDENT_NO
			  ,RG.REG_ACCOUNT_NO
			  ,MUST_PAY
			  ,INPUT_PAY
			  ,CLASS_YEAR
			  ,CLASS_TERM
			  ,RG.PAY_ACCOUNT_NO
			  ,PAY_DATE
			  ,START_DATE
			  ,END_DATE
			  ,PAY_STATUS
			  ,STUDENT_NAME
			  ,TO_CHAR('HH:mm:ss',PAY_DATE) "PAYTIME"
		FROM REG_ACC RG
		JOIN STUDENT ST USING(STUDENT_NO)
		WHERE REG_NO = #{regNo}
	</select>
	
	<!-- 등록금 수정 -->
	<update id="updateRegistPay">
		UPDATE REG_ACC
		SET MUST_PAY = #{mustPay}
		   ,START_DATE = #{startDate}
		   ,END_DATE = #{endDate}
		WHERE REG_NO = #{regNo} 
	</update>
	<!-- (관리자) 등록금 미납자정보  조회 -->
	<select id="selectRegistNonPaidList" resultMap="registPayResultSet">
		SELECT REG_NO
			  ,STUDENT_NO
			  ,RG.REG_ACCOUNT_NO
			  ,MUST_PAY
			  ,INPUT_PAY
			  ,RG.PAY_ACCOUNT_NO
			  ,PAY_DATE
			  ,PAY_STATUS
			  ,STUDENT_NAME
			  ,EMAIL
			  ,PHONE
			  ,ABS(INPUT_PAY - MUST_PAY) "NON_PAID_AMOUNT"
		FROM REG_ACC RG
		JOIN STUDENT ST USING(STUDENT_NO)
		WHERE PAY_STATUS IN ('N','D')
	</select>
	
	<!-- (관리자 )등록금 미납자 검색 -->
	<select id="selectRegistNonPaidListSearch" resultMap="registPayResultSet">
		SELECT REG_NO
			  ,STUDENT_NO
			  ,RG.REG_ACCOUNT_NO
			  ,MUST_PAY
			  ,INPUT_PAY
			  ,RG.PAY_ACCOUNT_NO
			  ,PAY_DATE
			  ,PAY_STATUS
			  ,STUDENT_NAME
			  ,EMAIL
			  ,PHONE
			  ,ABS(INPUT_PAY-MUST_PAY) "NON_PAID_AMOUNT"
		FROM REG_ACC RG
		JOIN STUDENT ST USING(STUDENT_NO)
		WHERE PAY_STATUS IN ('N','D')
		AND STUDENT_NAME = '%'||#{keyword}||'%'
	</select>
	
	<!-- (관리자) 등록금 초과분 환급 후 처리 -->
	<update id="refundOverPaid">
		UPDATE REG_ACC
		SET INPUT_PAY = #{inputPay}
		   ,PAY_STATUS = 'Y' 		  
		WHERE REG_NO = #{regNo}   
	</update>
	
	<!-- (관리자) 등록기간 활성화 -->
	<update id="activateRegistPay" parameterType="date">
		UPDATE REG_ACC
		SET STATUS = 'Y'
		<!-- 
		WHERE #{date} BETWEEN START_DATE AND END_DATE 
		AND STATUS = 'N' -->
		WHERE STATUS = 'N'
	</update>
	
	<!-- (관리자) 등록기간 비활성화 -->
	<update id="deactivateRegistPay" parameterType="date">
		UPDATE REG_ACC
		SET STATUS = 'N'
		WHERE #{date} &gt;= END_DATE
		AND STATUS = 'Y'
	</update>
	
	<resultMap type="student" id="resultSetForInsertRg">
		<result column="STUDENT_NO" property="studentNo"/>
		<result column="STUDENT_NAME" property="studentName"/>
		<result column="COLLEGE_REG_AMOUNT" property="classLevel"/><!-- 필드 빌려쓰기 -->
		<result column="SCH_TOTAL" property="post"/><!-- 필드 빌려쓰기 -->
	</resultMap>
	
	<!-- (관리자) 등록금 입력용 학생정보 조회,장학금 총합 추출 -->
	<select id="studentListToInsert" resultMap="resultSetForInsertRg" parameterType="map">
		<!-- 이번학기 등록금 값이 없는 재학중인 학생의 단대별등록금+총 장학금 -->
		SELECT STUDENT_NO
      		  ,STUDENT_NAME
     		  ,COLLEGE_REG_AMOUNT
     		  ,SCH.SCH_TOTAL
		FROM (SELECT STUDENT_NO,SCH_TOTAL
      		  FROM(SELECT STUDENT_NO,SUM(SCH_AMOUNT)"SCH_TOTAL"
             	   FROM SCHOLARSHIP
             	   WHERE STATUS = 'W'
             	   GROUP BY STUDENT_NO))"SCH"
		RIGHT JOIN STUDENT S USING(STUDENT_NO)
		JOIN COLLEGE C USING(COLLEGE_NO)
		WHERE S.STATUS ='재학'
		AND STUDENT_NO NOT IN (SELECT STUDENT_NO FROM REG_ACC WHERE CLASS_YEAR=#{classYear} AND CLASS_TERM=#{classTerm})
	</select>
	
	<!-- 가상계좌 가져오기 -->
	<select id="selectAccountNo" resultType="string" parameterType="string">
		SELECT REG_ACCOUNT_NO
		FROM REG_ACC
		WHERE STUDENT_NO = #{studentNo} 
	</select>
	
	<!-- (관리자) 가상계좌 생성시 중복체크 -->
	<select id="accountCheck" resultType="int" parameterType="string">
		SELECT COUNT(REG_ACCOUNT_NO)
		FROM REG_ACC
		WHERE REG_ACCOUNT_NO = #{regAccountNo}		
	</select>
	
	<!-- (관리자) 장학금 입력용 학생 이름추출  -->
	<select id="selectStudentForSc" resultType="string" parameterType="string" >
  		SELECT STUDENT_NAME
		FROM STUDENT  			   
		WHERE STUDENT_NO = #{studentNo}  			   
  	</select>
  	
  	<!-- (관리자) 장학금 처리완료로 변경 -->
  	<update id="finishScholarShip">
  		UPDATE SCHOLARSHIP
  		SET STATUS = 'Y'
  		,PRO_DATE = SYSDATE
  		WHERE STUDENT_NO = #{studentNo}
  		AND CLASS_YEAR = #{classYear}
  		AND CLASS_TERM = #{classTerm}
  	</update>
  	
  	<!-- (관리자) 장학금 정보 삭제 -->
  	<delete id="deleteRegistPay">
  		DELETE REG_ACC
  		WHERE STUDENT_NO = #{studentNo}
  		AND CLASS_YEAR = #{classYear}
  		AND CLASS_TERM = #{classTerm}
  	</delete>
  	
  	<!-- (관리자) 등록금 삭제에 따른 장학금 복구 -->
  	<update id="returnScholarShip">
  		UPDATE SCHOLARSHIP
  		SET STATUS = 'W'
  		WHERE STATUS = 'Y'
  		AND STUDENT_NO = #{studentNo}
  		AND CLASS_YEAR = #{classYear}
  		AND CLASS_TERM = #{classTerm}
  	</update>
  	<!-- (관리자) 등록금 삭제 전 장학금 유무 판단 -->
  	<select id="countScholarship" resultSets="_int">
  		SELECT COUNT(*)
  		FROM SCHOLARSHIP
  		WHERE STATUS = 'Y'
  		AND STUDENT_NO = #{studentNo}
  		AND CLASS_YEAR = #{classYear}
  		AND CLASS_TERM = #{classTerm}
  	</select>
  	
</mapper>